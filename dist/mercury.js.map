{"version":3,"file":"mercury.js","sources":["../src/utils/text/normalize-spaces.js","../src/utils/text/extract-from-url.js","../src/utils/text/constants.js","../src/utils/text/page-num-from-url.js","../src/utils/text/remove-anchor.js","../src/utils/text/article-base-url.js","../src/utils/text/has-sentence-end.js","../src/utils/text/excerpt-content.js","../src/utils/text/get-encoding.js","../src/resource/utils/constants.js","../src/resource/utils/fetch-resource.js","../src/resource/utils/dom/normalize-meta-tags.js","../src/utils/dom/constants.js","../src/utils/dom/strip-unlikely-candidates.js","../src/utils/dom/brs-to-ps.js","../src/utils/dom/paragraphize.js","../src/utils/dom/convert-to-paragraphs.js","../src/utils/dom/convert-node-to.js","../src/utils/dom/clean-images.js","../src/utils/dom/mark-to-keep.js","../src/utils/dom/strip-junk-tags.js","../src/utils/dom/clean-h-ones.js","../src/utils/dom/clean-attributes.js","../src/utils/dom/remove-empty.js","../src/extractors/generic/content/scoring/constants.js","../src/extractors/generic/content/scoring/get-weight.js","../src/extractors/generic/content/scoring/get-score.js","../src/extractors/generic/content/scoring/score-commas.js","../src/extractors/generic/content/scoring/score-length.js","../src/extractors/generic/content/scoring/score-paragraph.js","../src/extractors/generic/content/scoring/set-score.js","../src/extractors/generic/content/scoring/add-score.js","../src/extractors/generic/content/scoring/add-to-parent.js","../src/extractors/generic/content/scoring/get-or-init-score.js","../src/extractors/generic/content/scoring/score-node.js","../src/extractors/generic/content/scoring/score-content.js","../src/extractors/generic/content/scoring/merge-siblings.js","../src/extractors/generic/content/scoring/find-top-candidate.js","../src/utils/dom/clean-tags.js","../src/utils/dom/clean-headers.js","../src/utils/dom/rewrite-top-level.js","../src/utils/dom/make-links-absolute.js","../src/utils/dom/link-density.js","../src/utils/dom/extract-from-meta.js","../src/utils/dom/extract-from-selectors.js","../src/utils/dom/strip-tags.js","../src/utils/dom/within-comment.js","../src/utils/dom/node-is-sufficient.js","../src/utils/dom/is-wordpress.js","../src/utils/dom/get-attrs.js","../src/utils/dom/set-attr.js","../src/utils/dom/set-attrs.js","../src/resource/utils/dom/constants.js","../src/resource/utils/dom/convert-lazy-loaded-images.js","../src/resource/utils/dom/clean.js","../src/resource/index.js","../src/utils/range.js","../src/utils/validate-url.js","../src/utils/merge-supported-domains.js","../src/extractors/add-extractor.js","../src/extractors/custom/blogspot.com/index.js","../src/extractors/custom/nymag.com/index.js","../src/extractors/custom/wikipedia.org/index.js","../src/extractors/custom/twitter.com/index.js","../src/extractors/custom/www.nytimes.com/index.js","../src/extractors/custom/www.theatlantic.com/index.js","../src/extractors/custom/www.newyorker.com/index.js","../src/extractors/custom/www.wired.com/index.js","../src/extractors/custom/www.msn.com/index.js","../src/extractors/custom/www.yahoo.com/index.js","../src/extractors/custom/www.buzzfeed.com/index.js","../src/extractors/custom/fandom.wikia.com/index.js","../src/extractors/custom/www.littlethings.com/index.js","../src/extractors/custom/www.politico.com/index.js","../src/extractors/custom/deadspin.com/index.js","../src/extractors/custom/www.broadwayworld.com/index.js","../src/extractors/custom/www.apartmenttherapy.com/index.js","../src/extractors/custom/medium.com/index.js","../src/extractors/custom/www.tmz.com/index.js","../src/extractors/custom/www.washingtonpost.com/index.js","../src/extractors/custom/www.huffingtonpost.com/index.js","../src/extractors/custom/newrepublic.com/index.js","../src/extractors/custom/money.cnn.com/index.js","../src/extractors/custom/www.theverge.com/index.js","../src/extractors/custom/www.cnn.com/index.js","../src/extractors/custom/www.aol.com/index.js","../src/extractors/custom/www.youtube.com/index.js","../src/extractors/custom/www.theguardian.com/index.js","../src/extractors/custom/www.sbnation.com/index.js","../src/extractors/custom/www.bloomberg.com/index.js","../src/extractors/custom/www.bustle.com/index.js","../src/extractors/custom/www.npr.org/index.js","../src/extractors/custom/www.recode.net/index.js","../src/extractors/custom/qz.com/index.js","../src/extractors/custom/www.dmagazine.com/index.js","../src/extractors/custom/www.reuters.com/index.js","../src/extractors/custom/mashable.com/index.js","../src/extractors/custom/www.chicagotribune.com/index.js","../src/extractors/custom/www.vox.com/index.js","../src/extractors/custom/news.nationalgeographic.com/index.js","../src/extractors/custom/www.nationalgeographic.com/index.js","../src/extractors/custom/www.latimes.com/index.js","../src/extractors/custom/pagesix.com/index.js","../src/extractors/custom/thefederalistpapers.org/index.js","../src/extractors/custom/www.cbssports.com/index.js","../src/extractors/custom/www.msnbc.com/index.js","../src/extractors/custom/www.thepoliticalinsider.com/index.js","../src/extractors/custom/www.mentalfloss.com/index.js","../src/extractors/custom/abcnews.go.com/index.js","../src/extractors/custom/www.nydailynews.com/index.js","../src/extractors/custom/www.cnbc.com/index.js","../src/extractors/custom/www.popsugar.com/index.js","../src/extractors/custom/observer.com/index.js","../src/extractors/custom/people.com/index.js","../src/extractors/custom/www.usmagazine.com/index.js","../src/extractors/custom/www.rollingstone.com/index.js","../src/extractors/custom/247sports.com/index.js","../src/extractors/custom/uproxx.com/index.js","../src/extractors/custom/www.eonline.com/index.js","../src/extractors/custom/www.miamiherald.com/index.js","../src/extractors/custom/www.refinery29.com/index.js","../src/extractors/custom/www.macrumors.com/index.js","../src/extractors/custom/www.androidcentral.com/index.js","../src/extractors/custom/www.si.com/index.js","../src/extractors/custom/www.rawstory.com/index.js","../src/extractors/custom/www.cnet.com/index.js","../src/extractors/custom/www.cinemablend.com/index.js","../src/extractors/custom/www.today.com/index.js","../src/extractors/custom/www.howtogeek.com/index.js","../src/extractors/custom/www.al.com/index.js","../src/extractors/custom/www.thepennyhoarder.com/index.js","../src/extractors/custom/www.westernjournalism.com/index.js","../src/extractors/custom/fusion.net/index.js","../src/extractors/custom/www.americanow.com/index.js","../src/extractors/custom/sciencefly.com/index.js","../src/extractors/custom/hellogiggles.com/index.js","../src/extractors/custom/thoughtcatalog.com/index.js","../src/extractors/custom/www.nj.com/index.js","../src/extractors/custom/www.inquisitr.com/index.js","../src/extractors/custom/www.nbcnews.com/index.js","../src/extractors/custom/fortune.com/index.js","../src/extractors/custom/www.linkedin.com/index.js","../src/extractors/custom/obamawhitehouse.archives.gov/index.js","../src/extractors/custom/www.opposingviews.com/index.js","../src/extractors/custom/www.prospectmagazine.co.uk/index.js","../src/extractors/custom/forward.com/index.js","../src/extractors/custom/www.qdaily.com/index.js","../src/extractors/custom/gothamist.com/index.js","../src/extractors/custom/www.fool.com/index.js","../src/extractors/custom/www.slate.com/index.js","../src/extractors/custom/ici.radio-canada.ca/index.js","../src/extractors/custom/www.fortinet.com/index.js","../src/extractors/custom/www.fastcompany.com/index.js","../src/extractors/custom/blisterreview.com/index.js","../src/extractors/custom/news.mynavi.jp/index.js","../src/extractors/custom/clinicaltrials.gov/index.js","../src/extractors/custom/github.com/index.js","../src/extractors/custom/www.reddit.com/index.js","../src/extractors/custom/otrs.com/index.js","../src/extractors/custom/www.ossnews.jp/index.js","../src/extractors/custom/buzzap.jp/index.js","../src/extractors/custom/www.asahi.com/index.js","../src/extractors/custom/www.sanwa.co.jp/index.js","../src/extractors/custom/www.elecom.co.jp/index.js","../src/extractors/custom/scan.netsecurity.ne.jp/index.js","../src/extractors/custom/jvndb.jvn.jp/index.js","../src/extractors/custom/genius.com/index.js","../src/extractors/custom/www.jnsa.org/index.js","../src/extractors/custom/phpspot.org/index.js","../src/extractors/custom/www.infoq.com/index.js","../src/extractors/custom/www.moongift.jp/index.js","../src/extractors/custom/www.itmedia.co.jp/index.js","../src/extractors/custom/www.publickey1.jp/index.js","../src/extractors/custom/takagi-hiromitsu.jp/index.js","../src/extractors/custom/bookwalker.jp/index.js","../src/extractors/custom/www.yomiuri.co.jp/index.js","../src/extractors/custom/japan.cnet.com/index.js","../src/extractors/custom/deadline.com/index.js","../src/extractors/custom/www.gizmodo.jp/index.js","../src/extractors/custom/getnews.jp/index.js","../src/extractors/custom/www.lifehacker.jp/index.js","../src/extractors/custom/sect.iij.ad.jp/index.js","../src/extractors/custom/www.oreilly.co.jp/index.js","../src/extractors/custom/www.ipa.go.jp/index.js","../src/extractors/custom/weekly.ascii.jp/index.js","../src/extractors/custom/techlog.iij.ad.jp/index.js","../src/extractors/custom/wired.jp/index.js","../src/extractors/custom/japan.zdnet.com/index.js","../src/extractors/custom/www.rbbtoday.com/index.js","../src/extractors/custom/www.lemonde.fr/index.js","../src/extractors/custom/www.phoronix.com/index.js","../src/extractors/custom/pitchfork.com/index.js","../src/extractors/custom/biorxiv.org/index.js","../src/extractors/custom/epaper.zeit.de/index.js","../src/extractors/all.js","../src/cleaners/constants.js","../src/cleaners/author.js","../src/cleaners/lead-image-url.js","../src/cleaners/dek.js","../src/cleaners/date-published.js","../src/cleaners/content.js","../src/cleaners/title.js","../src/cleaners/resolve-split-title.js","../src/cleaners/index.js","../src/extractors/generic/content/extract-best-node.js","../src/extractors/generic/content/extractor.js","../src/extractors/generic/title/constants.js","../src/extractors/generic/title/extractor.js","../src/extractors/generic/author/constants.js","../src/extractors/generic/author/extractor.js","../src/extractors/generic/date-published/constants.js","../src/extractors/generic/date-published/extractor.js","../src/extractors/generic/dek/extractor.js","../src/extractors/generic/lead-image-url/constants.js","../src/extractors/generic/lead-image-url/score-image.js","../src/extractors/generic/lead-image-url/extractor.js","../src/extractors/generic/next-page-url/scoring/utils/score-similarity.js","../src/extractors/generic/next-page-url/scoring/utils/score-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-page-in-link.js","../src/extractors/generic/next-page-url/scoring/constants.js","../src/extractors/generic/next-page-url/scoring/utils/score-extraneous-links.js","../src/extractors/generic/next-page-url/scoring/utils/score-by-parents.js","../src/extractors/generic/next-page-url/scoring/utils/score-prev-link.js","../src/extractors/generic/next-page-url/scoring/utils/should-score.js","../src/extractors/generic/next-page-url/scoring/utils/score-base-url.js","../src/extractors/generic/next-page-url/scoring/utils/score-next-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-cap-links.js","../src/extractors/generic/next-page-url/scoring/score-links.js","../src/extractors/generic/next-page-url/extractor.js","../src/extractors/generic/url/constants.js","../src/extractors/generic/url/extractor.js","../src/extractors/generic/excerpt/constants.js","../src/extractors/generic/excerpt/extractor.js","../src/extractors/generic/word-count/extractor.js","../src/extractors/generic/index.js","../src/extractors/detect-by-html.js","../src/extractors/get-extractor.js","../src/extractors/root-extractor.js","../src/extractors/collect-all-pages.js","../src/mercury.js"],"sourcesContent":["const NORMALIZE_RE = /\\s{2,}(?![^<>]*<\\/(pre|code|textarea)>)/g;\n\nexport default function normalizeSpaces(text) {\n  return text.replace(NORMALIZE_RE, ' ').trim();\n}\n","// Given a node type to search for, and a list of regular expressions,\n// look to see if this extraction can be found in the URL. Expects\n// that each expression in r_list will return group(1) as the proper\n// string to be cleaned.\n// Only used for date_published currently.\nexport default function extractFromUrl(url, regexList) {\n  const matchRe = regexList.find(re => re.test(url));\n  if (matchRe) {\n    return matchRe.exec(url)[1];\n  }\n\n  return null;\n}\n","// An expression that looks to try to find the page digit within a URL, if\n// it exists.\n// Matches:\n//  page=1\n//  pg=1\n//  p=1\n//  paging=12\n//  pag=7\n//  pagination/1\n//  paging/88\n//  pa/83\n//  p/11\n//\n// Does not match:\n//  pg=102\n//  page:2\nexport const PAGE_IN_HREF_RE = new RegExp(\n  '(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})',\n  'i'\n);\n\nexport const HAS_ALPHA_RE = /[a-z]/i;\n\nexport const IS_ALPHA_RE = /^[a-z]+$/i;\nexport const IS_DIGIT_RE = /^[0-9]+$/i;\n\nexport const ENCODING_RE = /charset=([\\w-]+)\\b/;\nexport const DEFAULT_ENCODING = 'utf-8';\n","import { PAGE_IN_HREF_RE } from './constants';\n\nexport default function pageNumFromUrl(url) {\n  const matches = url.match(PAGE_IN_HREF_RE);\n  if (!matches) return null;\n\n  const pageNum = parseInt(matches[6], 10);\n\n  // Return pageNum < 100, otherwise\n  // return null\n  return pageNum < 100 ? pageNum : null;\n}\n","export default function removeAnchor(url) {\n  return url.split('#')[0].replace(/\\/$/, '');\n}\n","import URL from 'url';\n\nimport {\n  HAS_ALPHA_RE,\n  IS_ALPHA_RE,\n  IS_DIGIT_RE,\n  PAGE_IN_HREF_RE,\n} from './constants';\n\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\n  let goodSegment = true;\n\n  // If this is purely a number, and it's the first or second\n  // url_segment, it's probably a page number. Remove it.\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\n    goodSegment = true;\n  }\n\n  // If this is the first url_segment and it's just \"index\",\n  // remove it\n  if (index === 0 && segment.toLowerCase() === 'index') {\n    goodSegment = false;\n  }\n\n  // If our first or second url_segment is smaller than 3 characters,\n  // and the first url_segment had no alphas, remove it.\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\n    goodSegment = false;\n  }\n\n  return goodSegment;\n}\n\n// Take a URL, and return the article base of said URL. That is, no\n// pagination data exists in it. Useful for comparing to other links\n// that might have pagination data within them.\nexport default function articleBaseUrl(url, parsed) {\n  const parsedUrl = parsed || URL.parse(url);\n  const { protocol, host, path } = parsedUrl;\n\n  let firstSegmentHasLetters = false;\n  const cleanedSegments = path\n    .split('/')\n    .reverse()\n    .reduce((acc, rawSegment, index) => {\n      let segment = rawSegment;\n\n      // Split off and save anything that looks like a file type.\n      if (segment.includes('.')) {\n        const [possibleSegment, fileExt] = segment.split('.');\n        if (IS_ALPHA_RE.test(fileExt)) {\n          segment = possibleSegment;\n        }\n      }\n\n      // If our first or second segment has anything looking like a page\n      // number, remove it.\n      if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\n        segment = segment.replace(PAGE_IN_HREF_RE, '');\n      }\n\n      // If we're on the first segment, check to see if we have any\n      // characters in it. The first segment is actually the last bit of\n      // the URL, and this will be helpful to determine if we're on a URL\n      // segment that looks like \"/2/\" for example.\n      if (index === 0) {\n        firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\n      }\n\n      // If it's not marked for deletion, push it to cleaned_segments.\n      if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\n        acc.push(segment);\n      }\n\n      return acc;\n    }, []);\n\n  return `${protocol}//${host}${cleanedSegments.reverse().join('/')}`;\n}\n","// Given a string, return True if it appears to have an ending sentence\n// within it, false otherwise.\nconst SENTENCE_END_RE = new RegExp('.( |$)');\nexport default function hasSentenceEnd(text) {\n  return SENTENCE_END_RE.test(text);\n}\n","export default function excerptContent(content, words = 10) {\n  return content\n    .trim()\n    .split(/\\s+/)\n    .slice(0, words)\n    .join(' ');\n}\n","import iconv from 'iconv-lite';\nimport { DEFAULT_ENCODING, ENCODING_RE } from './constants';\n\n// check a string for encoding; this is\n// used in our fetchResource function to\n// ensure correctly encoded responses\nexport default function getEncoding(str) {\n  let encoding = DEFAULT_ENCODING;\n  const matches = ENCODING_RE.exec(str);\n  if (matches !== null) {\n    [, str] = matches;\n  }\n  if (iconv.encodingExists(str)) {\n    encoding = str;\n  }\n  return encoding;\n}\n","export const REQUEST_HEADERS = {\n  'User-Agent':\n    'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',\n};\n\n// The number of milliseconds to attempt to fetch a resource before timing out.\nexport const FETCH_TIMEOUT = 10000;\n\n// Content types that we do not extract content from\nconst BAD_CONTENT_TYPES = [\n  'audio/mpeg',\n  'image/gif',\n  'image/jpeg',\n  'image/jpg',\n];\n\nexport const BAD_CONTENT_TYPES_RE = new RegExp(\n  `^(${BAD_CONTENT_TYPES.join('|')})$`,\n  'i'\n);\n\n// Use this setting as the maximum size an article can be\n// for us to attempt parsing. Defaults to 5 MB.\nexport const MAX_CONTENT_LENGTH = 5242880;\n\n// Turn the global proxy on or off\n// Proxying is not currently enabled in Python source\n// so not implementing logic in port.\nexport const PROXY_DOMAINS = false;\nexport const REQUESTS_PROXIES = {\n  http: 'http://38.98.105.139:33333',\n  https: 'http://38.98.105.139:33333',\n};\n\nexport const DOMAINS_TO_PROXY = ['nih.gov', 'gutenberg.org'];\n","import URL from 'url';\nimport request from 'postman-request';\n\nimport {\n  REQUEST_HEADERS,\n  FETCH_TIMEOUT,\n  BAD_CONTENT_TYPES_RE,\n  MAX_CONTENT_LENGTH,\n} from './constants';\n\nfunction get(options) {\n  return new Promise((resolve, reject) => {\n    request(options, (err, response, body) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({ body, response });\n      }\n    });\n  });\n}\n\n// Evaluate a response to ensure it's something we should be keeping.\n// This does not validate in the sense of a response being 200 or not.\n// Validation here means that we haven't found reason to bail from\n// further processing of this url.\n\nexport function validateResponse(response, parseNon200 = false) {\n  // Check if we got a valid status code\n  // This isn't great, but I'm requiring a statusMessage to be set\n  // before short circuiting b/c nock doesn't set it in tests\n  // statusMessage only not set in nock response, in which case\n  // I check statusCode, which is currently only 200 for OK responses\n  // in tests\n  if (\n    (response.statusMessage && response.statusMessage !== 'OK') ||\n    response.statusCode !== 200\n  ) {\n    if (!response.statusCode) {\n      throw new Error(\n        `Unable to fetch content. Original exception was ${response.error}`\n      );\n    } else if (!parseNon200) {\n      throw new Error(\n        `Resource returned a response status code of ${\n          response.statusCode\n        } and resource was instructed to reject non-200 status codes.`\n      );\n    }\n  }\n\n  const {\n    'content-type': contentType,\n    'content-length': contentLength,\n  } = response.headers;\n\n  // Check that the content is not in BAD_CONTENT_TYPES\n  if (BAD_CONTENT_TYPES_RE.test(contentType)) {\n    throw new Error(\n      `Content-type for this resource was ${contentType} and is not allowed.`\n    );\n  }\n\n  // Check that the content length is below maximum\n  if (contentLength > MAX_CONTENT_LENGTH) {\n    throw new Error(\n      `Content for this resource was too large. Maximum content length is ${MAX_CONTENT_LENGTH}.`\n    );\n  }\n\n  return true;\n}\n\n// Grabs the last two pieces of the URL and joins them back together\n// This is to get the 'livejournal.com' from 'erotictrains.livejournal.com'\nexport function baseDomain({ host }) {\n  return host\n    .split('.')\n    .slice(-2)\n    .join('.');\n}\n\n// Set our response attribute to the result of fetching our URL.\n// TODO: This should gracefully handle timeouts and raise the\n//       proper exceptions on the many failure cases of HTTP.\n// TODO: Ensure we are not fetching something enormous. Always return\n//       unicode content for HTML, with charset conversion.\n\nexport default async function fetchResource(url, parsedUrl, headers = {}) {\n  parsedUrl = parsedUrl || URL.parse(encodeURI(url));\n  const options = {\n    url: parsedUrl.href,\n    headers: { ...REQUEST_HEADERS, ...headers },\n    timeout: FETCH_TIMEOUT,\n    // Accept cookies\n    jar: true,\n    // Set to null so the response returns as binary and body as buffer\n    // https://github.com/request/request#requestoptions-callback\n    encoding: null,\n    // Accept and decode gzip\n    gzip: true,\n    // Follow any non-GET redirects\n    followAllRedirects: true,\n    ...(typeof window !== 'undefined'\n      ? {}\n      : {\n          // Follow GET redirects; this option is for Node only\n          followRedirect: true,\n        }),\n  };\n\n  const { response, body } = await get(options);\n\n  try {\n    validateResponse(response);\n    return {\n      body,\n      response,\n    };\n  } catch (e) {\n    return {\n      error: true,\n      message: e.message,\n    };\n  }\n}\n","function convertMetaProp($, from, to) {\n  $(`meta[${from}]`).each((_, node) => {\n    const $node = $(node);\n\n    const value = $node.attr(from);\n    $node.attr(to, value);\n    $node.removeAttr(from);\n  });\n\n  return $;\n}\n\n// For ease of use in extracting from meta tags,\n// replace the \"content\" attribute on meta tags with the\n// \"value\" attribute.\n//\n// In addition, normalize 'property' attributes to 'name' for ease of\n// querying later. See, e.g., og or twitter meta tags.\n\nexport default function normalizeMetaTags($) {\n  $ = convertMetaProp($, 'content', 'value');\n  $ = convertMetaProp($, 'property', 'name');\n  return $;\n}\n","// Spacer images to be removed\nexport const SPACER_RE = new RegExp('transparent|spacer|blank', 'i');\n\n// The class we will use to mark elements we want to keep\n// but would normally remove\nexport const KEEP_CLASS = 'mercury-parser-keep';\n\nexport const KEEP_SELECTORS = [\n  'iframe[src^=\"https://www.youtube.com\"]',\n  'iframe[src^=\"https://www.youtube-nocookie.com\"]',\n  'iframe[src^=\"http://www.youtube.com\"]',\n  'iframe[src^=\"https://player.vimeo\"]',\n  'iframe[src^=\"http://player.vimeo\"]',\n  'iframe[src^=\"https://www.redditmedia.com\"]',\n];\n\n// A list of tags to strip from the output if we encounter them.\nexport const STRIP_OUTPUT_TAGS = [\n  'title',\n  'script',\n  'noscript',\n  'link',\n  'style',\n  'hr',\n  'embed',\n  'iframe',\n  'object',\n];\n\n// cleanAttributes\nexport const REMOVE_ATTRS = ['style', 'align'];\nexport const REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(\n  selector => `[${selector}]`\n);\nexport const REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nexport const WHITELIST_ATTRS = [\n  'src',\n  'srcset',\n  'sizes',\n  'type',\n  'href',\n  'class',\n  'id',\n  'alt',\n  'xlink:href',\n  'width',\n  'height',\n];\n\nexport const WHITELIST_ATTRS_RE = new RegExp(\n  `^(${WHITELIST_ATTRS.join('|')})$`,\n  'i'\n);\n\n// removeEmpty\nexport const REMOVE_EMPTY_TAGS = ['p'];\nexport const REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(\n  tag => `${tag}:empty`\n).join(',');\n\n// cleanTags\nexport const CLEAN_CONDITIONALLY_TAGS = [\n  'ul',\n  'ol',\n  'table',\n  'div',\n  'button',\n  'form',\n].join(',');\n\n// cleanHeaders\nconst HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nexport const HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  // 'form', // This is too generic, has too many false positives\n  'header',\n  'hidden',\n  'loader',\n  'login', // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'outbrain',\n  'pager',\n  'pagination',\n  'predicta', // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'taboola',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\n  'i'\n);\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(\n  POSITIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(\n  NEGATIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nexport const IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\n  EXTRANEOUS_LINK_HINTS.join('|'),\n  'i'\n);\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\nexport const NEXT_LINK_TEXT_RE = /(next|weiter|continue|>([^|]|$)|»([^|]|$))/i;\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\n  'i'\n);\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\n  'i'\n);\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import { CANDIDATES_WHITELIST, CANDIDATES_BLACKLIST } from './constants';\n\nexport default function stripUnlikelyCandidates($) {\n  //  Loop through the provided document and remove any non-link nodes\n  //  that are unlikely candidates for article content.\n  //\n  //  Links are ignored because there are very often links to content\n  //  that are identified as non-body-content, but may be inside\n  //  article-like content.\n  //\n  //  :param $: a cheerio object to strip nodes from\n  //  :return $: the cleaned cheerio object\n  $('*')\n    .not('a')\n    .each((index, node) => {\n      const $node = $(node);\n      const classes = $node.attr('class');\n      const id = $node.attr('id');\n      if (!id && !classes) return;\n\n      const classAndId = `${classes || ''} ${id || ''}`;\n      if (CANDIDATES_WHITELIST.test(classAndId)) {\n        return;\n      }\n      if (CANDIDATES_BLACKLIST.test(classAndId)) {\n        $node.remove();\n      }\n    });\n\n  return $;\n}\n","import { paragraphize } from './index';\n\n// ## NOTES:\n// Another good candidate for refactoring/optimizing.\n// Very imperative code, I don't love it. - AP\n\n//  Given cheerio object, convert consecutive <br /> tags into\n//  <p /> tags instead.\n//\n//  :param $: A cheerio object\n\nexport default function brsToPs($) {\n  let collapsing = false;\n  $('br').each((index, element) => {\n    const $element = $(element);\n    const nextElement = $element.next().get(0);\n\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\n      collapsing = true;\n      $element.remove();\n    } else if (collapsing) {\n      collapsing = false;\n      paragraphize(element, $, true);\n    }\n  });\n\n  return $;\n}\n","import { BLOCK_LEVEL_TAGS_RE } from './constants';\n\n// Given a node, turn it into a P if it is not already a P, and\n// make sure it conforms to the constraints of a P tag (I.E. does\n// not contain any other block tags.)\n//\n// If the node is a <br />, it treats the following inline siblings\n// as if they were its children.\n//\n// :param node: The node to paragraphize; this is a raw node\n// :param $: The cheerio object to handle dom manipulation\n// :param br: Whether or not the passed node is a br\n\nexport default function paragraphize(node, $, br = false) {\n  const $node = $(node);\n\n  if (br) {\n    let sibling = node.nextSibling;\n    const p = $('<p></p>');\n\n    // while the next node is text or not a block level element\n    // append it to a new p node\n    while (\n      sibling &&\n      !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))\n    ) {\n      const { nextSibling } = sibling;\n      $(sibling).appendTo(p);\n      sibling = nextSibling;\n    }\n\n    $node.replaceWith(p);\n    $node.remove();\n    return $;\n  }\n\n  return $;\n}\n","import { brsToPs, convertNodeTo } from 'utils/dom';\n\nimport { DIV_TO_P_BLOCK_TAGS } from './constants';\n\nfunction convertDivs($) {\n  $('div').each((index, div) => {\n    const $div = $(div);\n    const convertable = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\n\n    if (convertable) {\n      convertNodeTo($div, $, 'p');\n    }\n  });\n\n  return $;\n}\n\nfunction convertSpans($) {\n  $('span').each((index, span) => {\n    const $span = $(span);\n    const convertable = $span.parents('p, div').length === 0;\n    if (convertable) {\n      convertNodeTo($span, $, 'p');\n    }\n  });\n\n  return $;\n}\n\n// Loop through the provided doc, and convert any p-like elements to\n// actual paragraph tags.\n//\n//   Things fitting this criteria:\n//   * Multiple consecutive <br /> tags.\n//   * <div /> tags without block level elements inside of them\n//   * <span /> tags who are not children of <p /> or <div /> tags.\n//\n//   :param $: A cheerio object to search\n//   :return cheerio object with new p elements\n//   (By-reference mutation, though. Returned just for convenience.)\n\nexport default function convertToParagraphs($) {\n  $ = brsToPs($);\n  $ = convertDivs($);\n  $ = convertSpans($);\n\n  return $;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function convertNodeTo($node, $, tag = 'p') {\n  const node = $node.get(0);\n  if (!node) {\n    return $;\n  }\n  const attrs = getAttrs(node) || {};\n\n  const attribString = Reflect.ownKeys(attrs)\n    .map(key => `${key}=${attrs[key]}`)\n    .join(' ');\n  const html = $node.contents();\n\n  $node.replaceWith(`<${tag} ${attribString}>${html}</${tag}>`);\n  return $;\n}\n","import { SPACER_RE } from './constants';\n\nfunction cleanForHeight($img, $) {\n  const height = parseInt($img.attr('height'), 10);\n  const width = parseInt($img.attr('width'), 10) || 20;\n\n  // Remove images that explicitly have very small heights or\n  // widths, because they are most likely shims or icons,\n  // which aren't very useful for reading.\n  if ((height || 20) < 10 || width < 10) {\n    $img.remove();\n  } else if (height) {\n    // Don't ever specify a height on images, so that we can\n    // scale with respect to width without screwing up the\n    // aspect ratio.\n    $img.removeAttr('height');\n  }\n\n  return $;\n}\n\n// Cleans out images where the source string matches transparent/spacer/etc\n// TODO This seems very aggressive - AP\nfunction removeSpacers($img, $) {\n  if (SPACER_RE.test($img.attr('src'))) {\n    $img.remove();\n  }\n\n  return $;\n}\n\nexport default function cleanImages($article, $) {\n  $article.find('img').each((index, img) => {\n    const $img = $(img);\n\n    cleanForHeight($img, $);\n    removeSpacers($img, $);\n  });\n\n  return $;\n}\n","import URL from 'url';\n\nimport { KEEP_SELECTORS, KEEP_CLASS } from './constants';\n\nexport default function markToKeep(article, $, url, tags = []) {\n  if (tags.length === 0) {\n    tags = KEEP_SELECTORS;\n  }\n\n  if (url) {\n    const { protocol, hostname } = URL.parse(url);\n    tags = [...tags, `iframe[src^=\"${protocol}//${hostname}\"]`];\n  }\n\n  $(tags.join(','), article).addClass(KEEP_CLASS);\n\n  return $;\n}\n","import { STRIP_OUTPUT_TAGS, KEEP_CLASS } from './constants';\n\nexport default function stripJunkTags(article, $, tags = []) {\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  // Remove matching elements, but ignore\n  // any element with a class of mercury-parser-keep\n  $(tags.join(','), article)\n    .not(`.${KEEP_CLASS}`)\n    .remove();\n\n  return $;\n}\n","import { convertNodeTo } from 'utils/dom';\n\n// H1 tags are typically the article title, which should be extracted\n// by the title extractor instead. If there's less than 3 of them (<3),\n// strip them. Otherwise, turn 'em into H2s.\nexport default function cleanHOnes(article, $) {\n  const $hOnes = $('h1', article);\n\n  if ($hOnes.length < 3) {\n    $hOnes.each((index, node) => $(node).remove());\n  } else {\n    $hOnes.each((index, node) => {\n      convertNodeTo($(node), $, 'h2');\n    });\n  }\n\n  return $;\n}\n","import { getAttrs, setAttrs } from 'utils/dom';\n\nimport { WHITELIST_ATTRS_RE, KEEP_CLASS } from './constants';\n\nfunction removeAllButWhitelist($article, $) {\n  $article.find('*').each((index, node) => {\n    const attrs = getAttrs(node);\n\n    setAttrs(\n      node,\n      Reflect.ownKeys(attrs).reduce((acc, attr) => {\n        if (WHITELIST_ATTRS_RE.test(attr)) {\n          return { ...acc, [attr]: attrs[attr] };\n        }\n\n        return acc;\n      }, {})\n    );\n  });\n\n  // Remove the mercury-parser-keep class from result\n  $(`.${KEEP_CLASS}`, $article).removeClass(KEEP_CLASS);\n\n  return $article;\n}\n\n// Remove attributes like style or align\nexport default function cleanAttributes($article, $) {\n  // Grabbing the parent because at this point\n  // $article will be wrapped in a div which will\n  // have a score set on it.\n  return removeAllButWhitelist(\n    $article.parent().length ? $article.parent() : $article,\n    $\n  );\n}\n","export default function removeEmpty($article, $) {\n  $article.find('p').each((index, p) => {\n    const $p = $(p);\n    if ($p.find('iframe, img').length === 0 && $p.text().trim() === '')\n      $p.remove();\n  });\n\n  return $;\n}\n","// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  'form',\n  'header',\n  'hidden',\n  'loader',\n  'login', // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'pager',\n  'pagination',\n  'predicta', // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\n  'i'\n);\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(\n  POSITIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(\n  NEGATIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\n  'i'\n);\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\n  'i'\n);\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import {\n  NEGATIVE_SCORE_RE,\n  POSITIVE_SCORE_RE,\n  PHOTO_HINTS_RE,\n  READABILITY_ASSET,\n} from './constants';\n\n// Get the score of a node based on its className and id.\nexport default function getWeight(node) {\n  const classes = node.attr('class');\n  const id = node.attr('id');\n  let score = 0;\n\n  if (id) {\n    // if id exists, try to score on both positive and negative\n    if (POSITIVE_SCORE_RE.test(id)) {\n      score += 25;\n    }\n    if (NEGATIVE_SCORE_RE.test(id)) {\n      score -= 25;\n    }\n  }\n\n  if (classes) {\n    if (score === 0) {\n      // if classes exist and id did not contribute to score\n      // try to score on both positive and negative\n      if (POSITIVE_SCORE_RE.test(classes)) {\n        score += 25;\n      }\n      if (NEGATIVE_SCORE_RE.test(classes)) {\n        score -= 25;\n      }\n    }\n\n    // even if score has been set by id, add score for\n    // possible photo matches\n    // \"try to keep photos if we can\"\n    if (PHOTO_HINTS_RE.test(classes)) {\n      score += 10;\n    }\n\n    // add 25 if class matches entry-content-asset,\n    // a class apparently instructed for use in the\n    // Readability publisher guidelines\n    // https://www.readability.com/developers/guidelines\n    if (READABILITY_ASSET.test(classes)) {\n      score += 25;\n    }\n  }\n\n  return score;\n}\n","// returns the score of a node based on\n// the node's score attribute\n// returns null if no score set\nexport default function getScore($node) {\n  return parseFloat($node.attr('score')) || null;\n}\n","// return 1 for every comma in text\nexport default function scoreCommas(text) {\n  return (text.match(/,/g) || []).length;\n}\n","const idkRe = new RegExp('^(p|pre)$', 'i');\n\nexport default function scoreLength(textLength, tagName = 'p') {\n  const chunks = textLength / 50;\n\n  if (chunks > 0) {\n    let lengthBonus;\n\n    // No idea why p or pre are being tamped down here\n    // but just following the source for now\n    // Not even sure why tagName is included here,\n    // since this is only being called from the context\n    // of scoreParagraph\n    if (idkRe.test(tagName)) {\n      lengthBonus = chunks - 2;\n    } else {\n      lengthBonus = chunks - 1.25;\n    }\n\n    return Math.min(Math.max(lengthBonus, 0), 3);\n  }\n\n  return 0;\n}\n","import { scoreCommas, scoreLength } from './index';\n\n// Score a paragraph using various methods. Things like number of\n// commas, etc. Higher is better.\nexport default function scoreParagraph(node) {\n  let score = 1;\n  const text = node.text().trim();\n  const textLength = text.length;\n\n  // If this paragraph is less than 25 characters, don't count it.\n  if (textLength < 25) {\n    return 0;\n  }\n\n  // Add points for any commas within this paragraph\n  score += scoreCommas(text);\n\n  // For every 50 characters in this paragraph, add another point. Up\n  // to 3 points.\n  score += scoreLength(textLength);\n\n  // Articles can end with short paragraphs when people are being clever\n  // but they can also end with short paragraphs setting up lists of junk\n  // that we strip. This negative tweaks junk setup paragraphs just below\n  // the cutoff threshold.\n  if (text.slice(-1) === ':') {\n    score -= 1;\n  }\n\n  return score;\n}\n","export default function setScore($node, $, score) {\n  $node.attr('score', score);\n  return $node;\n}\n","import { getOrInitScore, setScore } from './index';\n\nexport default function addScore($node, $, amount) {\n  try {\n    const score = getOrInitScore($node, $) + amount;\n    setScore($node, $, score);\n  } catch (e) {\n    // Ignoring; error occurs in scoreNode\n  }\n\n  return $node;\n}\n","import { addScore } from './index';\n\n// Adds 1/4 of a child's score to its parent\nexport default function addToParent(node, $, score) {\n  const parent = node.parent();\n  if (parent) {\n    addScore(parent, $, score * 0.25);\n  }\n\n  return node;\n}\n","import { getScore, scoreNode, getWeight, addToParent } from './index';\n\n// gets and returns the score if it exists\n// if not, initializes a score based on\n// the node's tag type\nexport default function getOrInitScore($node, $, weightNodes = true) {\n  let score = getScore($node);\n\n  if (score) {\n    return score;\n  }\n\n  score = scoreNode($node);\n\n  if (weightNodes) {\n    score += getWeight($node);\n  }\n\n  addToParent($node, $, score);\n\n  return score;\n}\n","import { scoreParagraph } from './index';\nimport {\n  PARAGRAPH_SCORE_TAGS,\n  CHILD_CONTENT_TAGS,\n  BAD_TAGS,\n} from './constants';\n\n// Score an individual node. Has some smarts for paragraphs, otherwise\n// just scores based on tag.\nexport default function scoreNode($node) {\n  const { tagName } = $node.get(0);\n\n  // TODO: Consider ordering by most likely.\n  // E.g., if divs are a more common tag on a page,\n  // Could save doing that regex test on every node – AP\n  if (PARAGRAPH_SCORE_TAGS.test(tagName)) {\n    return scoreParagraph($node);\n  }\n  if (tagName.toLowerCase() === 'div') {\n    return 5;\n  }\n  if (CHILD_CONTENT_TAGS.test(tagName)) {\n    return 3;\n  }\n  if (BAD_TAGS.test(tagName)) {\n    return -3;\n  }\n  if (tagName.toLowerCase() === 'th') {\n    return -5;\n  }\n\n  return 0;\n}\n","import { convertNodeTo } from 'utils/dom';\n\nimport { HNEWS_CONTENT_SELECTORS } from './constants';\nimport { scoreNode, setScore, getOrInitScore, addScore } from './index';\n\nfunction convertSpans($node, $) {\n  if ($node.get(0)) {\n    const { tagName } = $node.get(0);\n\n    if (tagName === 'span') {\n      // convert spans to divs\n      convertNodeTo($node, $, 'div');\n    }\n  }\n}\n\nfunction addScoreTo($node, $, score) {\n  if ($node) {\n    convertSpans($node, $);\n    addScore($node, $, score);\n  }\n}\n\nfunction scorePs($, weightNodes) {\n  $('p, pre')\n    .not('[score]')\n    .each((index, node) => {\n      // The raw score for this paragraph, before we add any parent/child\n      // scores.\n      let $node = $(node);\n      $node = setScore($node, $, getOrInitScore($node, $, weightNodes));\n\n      const $parent = $node.parent();\n      const rawScore = scoreNode($node);\n\n      addScoreTo($parent, $, rawScore, weightNodes);\n      if ($parent) {\n        // Add half of the individual content score to the\n        // grandparent\n        addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\n      }\n    });\n\n  return $;\n}\n\n// score content. Parents get the full value of their children's\n// content score, grandparents half\nexport default function scoreContent($, weightNodes = true) {\n  // First, look for special hNews based selectors and give them a big\n  // boost, if they exist\n  HNEWS_CONTENT_SELECTORS.forEach(([parentSelector, childSelector]) => {\n    $(`${parentSelector} ${childSelector}`).each((index, node) => {\n      addScore($(node).parent(parentSelector), $, 80);\n    });\n  });\n\n  // Doubling this again\n  // Previous solution caused a bug\n  // in which parents weren't retaining\n  // scores. This is not ideal, and\n  // should be fixed.\n  scorePs($, weightNodes);\n  scorePs($, weightNodes);\n\n  return $;\n}\n","import { textLength, linkDensity } from 'utils/dom';\nimport { hasSentenceEnd } from 'utils/text';\n\nimport { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\nimport { getScore } from './index';\n\n// Now that we have a top_candidate, look through the siblings of\n// it to see if any of them are decently scored. If they are, they\n// may be split parts of the content (Like two divs, a preamble and\n// a body.) Example:\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\nexport default function mergeSiblings($candidate, topScore, $) {\n  if (!$candidate.parent().length) {\n    return $candidate;\n  }\n\n  const siblingScoreThreshold = Math.max(10, topScore * 0.25);\n  const wrappingDiv = $('<div></div>');\n\n  $candidate\n    .parent()\n    .children()\n    .each((index, sibling) => {\n      const $sibling = $(sibling);\n      // Ignore tags like BR, HR, etc\n      if (NON_TOP_CANDIDATE_TAGS_RE.test(sibling.tagName)) {\n        return null;\n      }\n\n      const siblingScore = getScore($sibling);\n      if (siblingScore) {\n        if ($sibling.get(0) === $candidate.get(0)) {\n          wrappingDiv.append($sibling);\n        } else {\n          let contentBonus = 0;\n          const density = linkDensity($sibling);\n\n          // If sibling has a very low link density,\n          // give it a small bonus\n          if (density < 0.05) {\n            contentBonus += 20;\n          }\n\n          // If sibling has a high link density,\n          // give it a penalty\n          if (density >= 0.5) {\n            contentBonus -= 20;\n          }\n\n          // If sibling node has the same class as\n          // candidate, give it a bonus\n          if ($sibling.attr('class') === $candidate.attr('class')) {\n            contentBonus += topScore * 0.2;\n          }\n\n          const newScore = siblingScore + contentBonus;\n\n          if (newScore >= siblingScoreThreshold) {\n            return wrappingDiv.append($sibling);\n          }\n          if (sibling.tagName === 'p') {\n            const siblingContent = $sibling.text();\n            const siblingContentLength = textLength(siblingContent);\n\n            if (siblingContentLength > 80 && density < 0.25) {\n              return wrappingDiv.append($sibling);\n            }\n            if (\n              siblingContentLength <= 80 &&\n              density === 0 &&\n              hasSentenceEnd(siblingContent)\n            ) {\n              return wrappingDiv.append($sibling);\n            }\n          }\n        }\n      }\n\n      return null;\n    });\n\n  if (\n    wrappingDiv.children().length === 1 &&\n    wrappingDiv\n      .children()\n      .first()\n      .get(0) === $candidate.get(0)\n  ) {\n    return $candidate;\n  }\n\n  return wrappingDiv;\n}\n","import { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\nimport { getScore } from './index';\nimport mergeSiblings from './merge-siblings';\n\n// After we've calculated scores, loop through all of the possible\n// candidate nodes we found and find the one with the highest score.\nexport default function findTopCandidate($) {\n  let $candidate;\n  let topScore = 0;\n\n  $('[score]').each((index, node) => {\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE.test(node.tagName)) {\n      return;\n    }\n\n    const $node = $(node);\n    const score = getScore($node);\n\n    if (score > topScore) {\n      topScore = score;\n      $candidate = $node;\n    }\n  });\n\n  // If we don't have a candidate, return the body\n  // or whatever the first element is\n  if (!$candidate) {\n    return $('body') || $('*').first();\n  }\n\n  $candidate = mergeSiblings($candidate, topScore, $);\n\n  return $candidate;\n}\n","import {\n  getScore,\n  setScore,\n  getOrInitScore,\n  scoreCommas,\n} from 'extractors/generic/content/scoring';\n\nimport { CLEAN_CONDITIONALLY_TAGS, KEEP_CLASS } from './constants';\nimport { normalizeSpaces } from '../text';\nimport { linkDensity } from './index';\n\nfunction removeUnlessContent($node, $, weight) {\n  // Explicitly save entry-content-asset tags, which are\n  // noted as valuable in the Publisher guidelines. For now\n  // this works everywhere. We may want to consider making\n  // this less of a sure-thing later.\n  if ($node.hasClass('entry-content-asset')) {\n    return;\n  }\n\n  const content = normalizeSpaces($node.text());\n\n  if (scoreCommas(content) < 10) {\n    const pCount = $('p', $node).length;\n    const inputCount = $('input', $node).length;\n\n    // Looks like a form, too many inputs.\n    if (inputCount > pCount / 3) {\n      $node.remove();\n      return;\n    }\n\n    const contentLength = content.length;\n    const imgCount = $('img', $node).length;\n\n    // Content is too short, and there are no images, so\n    // this is probably junk content.\n    if (contentLength < 25 && imgCount === 0) {\n      $node.remove();\n      return;\n    }\n\n    const density = linkDensity($node);\n\n    // Too high of link density, is probably a menu or\n    // something similar.\n    // console.log(weight, density, contentLength)\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\n      $node.remove();\n      return;\n    }\n\n    // Too high of a link density, despite the score being\n    // high.\n    if (weight >= 25 && density > 0.5) {\n      // Don't remove the node if it's a list and the\n      // previous sibling starts with a colon though. That\n      // means it's probably content.\n      const tagName = $node.get(0).tagName.toLowerCase();\n      const nodeIsList = tagName === 'ol' || tagName === 'ul';\n      if (nodeIsList) {\n        const previousNode = $node.prev();\n        if (\n          previousNode &&\n          normalizeSpaces(previousNode.text()).slice(-1) === ':'\n        ) {\n          return;\n        }\n      }\n\n      $node.remove();\n      return;\n    }\n\n    const scriptCount = $('script', $node).length;\n\n    // Too many script tags, not enough content.\n    if (scriptCount > 0 && contentLength < 150) {\n      $node.remove();\n    }\n  }\n}\n\n// Given an article, clean it of some superfluous content specified by\n// tags. Things like forms, ads, etc.\n//\n// Tags is an array of tag name's to search through. (like div, form,\n// etc)\n//\n// Return this same doc.\nexport default function cleanTags($article, $) {\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each((index, node) => {\n    const $node = $(node);\n    // If marked to keep, skip it\n    if ($node.hasClass(KEEP_CLASS) || $node.find(`.${KEEP_CLASS}`).length > 0)\n      return;\n\n    let weight = getScore($node);\n    if (!weight) {\n      weight = getOrInitScore($node, $);\n      setScore($node, $, weight);\n    }\n\n    // drop node if its weight is < 0\n    if (weight < 0) {\n      $node.remove();\n    } else {\n      // deteremine if node seems like content\n      removeUnlessContent($node, $, weight);\n    }\n  });\n\n  return $;\n}\n","import { getWeight } from 'extractors/generic/content/scoring';\n\nimport { HEADER_TAG_LIST } from './constants';\nimport { normalizeSpaces } from '../text';\n\nexport default function cleanHeaders($article, $, title = '') {\n  $(HEADER_TAG_LIST, $article).each((index, header) => {\n    const $header = $(header);\n    // Remove any headers that appear before all other p tags in the\n    // document. This probably means that it was part of the title, a\n    // subtitle or something else extraneous like a datestamp or byline,\n    // all of which should be handled by other metadata handling.\n    if ($($header, $article).prevAll('p').length === 0) {\n      return $header.remove();\n    }\n\n    // Remove any headers that match the title exactly.\n    if (normalizeSpaces($(header).text()) === title) {\n      return $header.remove();\n    }\n\n    // If this header has a negative weight, it's probably junk.\n    // Get rid of it.\n    if (getWeight($(header)) < 0) {\n      return $header.remove();\n    }\n\n    return $header;\n  });\n\n  return $;\n}\n","import { convertNodeTo } from 'utils/dom';\n\n// Rewrite the tag name to div if it's a top level node like body or\n// html to avoid later complications with multiple body tags.\nexport default function rewriteTopLevel(article, $) {\n  // I'm not using context here because\n  // it's problematic when converting the\n  // top-level/root node - AP\n  $ = convertNodeTo($('html'), $, 'div');\n  $ = convertNodeTo($('body'), $, 'div');\n\n  return $;\n}\n","import URL from 'url';\n\nimport { getAttrs, setAttr } from 'utils/dom';\n\nfunction absolutize($, rootUrl, attr) {\n  const baseUrl = $('base').attr('href');\n\n  $(`[${attr}]`).each((_, node) => {\n    const attrs = getAttrs(node);\n    const url = attrs[attr];\n    if (!url) return;\n    const absoluteUrl = URL.resolve(baseUrl || rootUrl, url);\n\n    setAttr(node, attr, absoluteUrl);\n  });\n}\n\nfunction absolutizeSet($, rootUrl, $content) {\n  $('[srcset]', $content).each((_, node) => {\n    const attrs = getAttrs(node);\n    const urlSet = attrs.srcset;\n\n    if (urlSet) {\n      // a comma should be considered part of the candidate URL unless preceded by a descriptor\n      // descriptors can only contain positive numbers followed immediately by either 'w' or 'x'\n      // space characters inside the URL should be encoded (%20 or +)\n      const candidates = urlSet.match(\n        /(?:\\s*)(\\S+(?:\\s*[\\d.]+[wx])?)(?:\\s*,\\s*)?/g\n      );\n      if (!candidates) return;\n      const absoluteCandidates = candidates.map(candidate => {\n        // a candidate URL cannot start or end with a comma\n        // descriptors are separated from the URLs by unescaped whitespace\n        const parts = candidate\n          .trim()\n          .replace(/,$/, '')\n          .split(/\\s+/);\n        parts[0] = URL.resolve(rootUrl, parts[0]);\n        return parts.join(' ');\n      });\n      const absoluteUrlSet = [...new Set(absoluteCandidates)].join(', ');\n      setAttr(node, 'srcset', absoluteUrlSet);\n    }\n  });\n}\n\nexport default function makeLinksAbsolute($content, $, url) {\n  ['href', 'src'].forEach(attr => absolutize($, url, attr));\n  absolutizeSet($, url, $content);\n\n  return $content;\n}\n","export function textLength(text) {\n  return text.trim().replace(/\\s+/g, ' ').length;\n}\n\n// Determines what percentage of the text\n// in a node is link text\n// Takes a node, returns a float\nexport function linkDensity($node) {\n  const totalTextLength = textLength($node.text());\n\n  const linkText = $node.find('a').text();\n  const linkLength = textLength(linkText);\n\n  if (totalTextLength > 0) {\n    return linkLength / totalTextLength;\n  }\n  if (totalTextLength === 0 && linkLength > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n","import { stripTags } from 'utils/dom';\n\n// Given a node type to search for, and a list of meta tag names to\n// search for, find a meta tag associated.\nexport default function extractFromMeta(\n  $,\n  metaNames,\n  cachedNames,\n  cleanTags = true\n) {\n  const foundNames = metaNames.filter(name => cachedNames.indexOf(name) !== -1);\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of foundNames) {\n    const type = 'name';\n    const value = 'value';\n\n    const nodes = $(`meta[${type}=\"${name}\"]`);\n\n    // Get the unique value of every matching node, in case there\n    // are two meta tags with the same name and value.\n    // Remove empty values.\n    const values = nodes\n      .map((index, node) => $(node).attr(value))\n      .toArray()\n      .filter(text => text !== '');\n\n    // If we have more than one value for the same name, we have a\n    // conflict and can't trust any of them. Skip this name. If we have\n    // zero, that means our meta tags had no values. Skip this name\n    // also.\n    if (values.length === 1) {\n      let metaValue;\n      // Meta values that contain HTML should be stripped, as they\n      // weren't subject to cleaning previously.\n      if (cleanTags) {\n        metaValue = stripTags(values[0], $);\n      } else {\n        [metaValue] = values;\n      }\n\n      return metaValue;\n    }\n  }\n\n  // If nothing is found, return null\n  return null;\n}\n","import { withinComment } from 'utils/dom';\n\nfunction isGoodNode($node, maxChildren) {\n  // If it has a number of children, it's more likely a container\n  // element. Skip it.\n  if ($node.children().length > maxChildren) {\n    return false;\n  }\n  // If it looks to be within a comment, skip it.\n  if (withinComment($node)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Given a a list of selectors find content that may\n// be extractable from the document. This is for flat\n// meta-information, like author, title, date published, etc.\nexport default function extractFromSelectors(\n  $,\n  selectors,\n  maxChildren = 1,\n  textOnly = true\n) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const selector of selectors) {\n    const nodes = $(selector);\n\n    // If we didn't get exactly one of this selector, this may be\n    // a list of articles or comments. Skip it.\n    if (nodes.length === 1) {\n      const $node = $(nodes[0]);\n\n      if (isGoodNode($node, maxChildren)) {\n        let content;\n        if (textOnly) {\n          content = $node.text();\n        } else {\n          content = $node.html();\n        }\n\n        if (content) {\n          return content;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n","// strips all tags from a string of text\nexport default function stripTags(text, $) {\n  // Wrapping text in html element prevents errors when text\n  // has no html\n  const cleanText = $(`<span>${text}</span>`).text();\n  return cleanText === '' ? text : cleanText;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function withinComment($node) {\n  const parents = $node.parents().toArray();\n  const commentParent = parents.find(parent => {\n    const attrs = getAttrs(parent);\n    const { class: nodeClass, id } = attrs;\n    const classAndId = `${nodeClass} ${id}`;\n    return classAndId.includes('comment');\n  });\n\n  return commentParent !== undefined;\n}\n","// Given a node, determine if it's article-like enough to return\n// param: node (a cheerio node)\n// return: boolean\n\nexport default function nodeIsSufficient($node) {\n  return $node.text().trim().length >= 100;\n}\n","import { IS_WP_SELECTOR } from './constants';\n\nexport default function isWordpress($) {\n  return $(IS_WP_SELECTOR).length > 0;\n}\n","export default function getAttrs(node) {\n  const { attribs, attributes } = node;\n\n  if (!attribs && attributes) {\n    const attrs = Reflect.ownKeys(attributes).reduce((acc, index) => {\n      const attr = attributes[index];\n\n      if (!attr.name || !attr.value) return acc;\n\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n    return attrs;\n  }\n\n  return attribs;\n}\n","export default function setAttr(node, attr, val) {\n  if (node.attribs) {\n    node.attribs[attr] = val;\n  } else if (node.attributes) {\n    node.setAttribute(attr, val);\n  }\n\n  return node;\n}\n","export default function setAttrs(node, attrs) {\n  if (node.attribs) {\n    node.attribs = attrs;\n  } else if (node.attributes) {\n    while (node.attributes.length > 0) {\n      node.removeAttribute(node.attributes[0].name);\n    }\n\n    Reflect.ownKeys(attrs).forEach(key => {\n      node.setAttribute(key, attrs[key]);\n    });\n  }\n\n  return node;\n}\n","export const IS_LINK = new RegExp('https?://', 'i');\nconst IMAGE_RE = '.(png|gif|jpe?g)';\nexport const IS_IMAGE = new RegExp(`${IMAGE_RE}`, 'i');\nexport const IS_SRCSET = new RegExp(\n  `${IMAGE_RE}(\\\\?\\\\S+)?(\\\\s*[\\\\d.]+[wx])`,\n  'i'\n);\n\nexport const TAGS_TO_REMOVE = ['script', 'style', 'form'].join(',');\n","import { getAttrs } from 'utils/dom';\n\nimport { IS_LINK, IS_IMAGE, IS_SRCSET } from './constants';\n\n// Convert all instances of images with potentially\n// lazy loaded images into normal images.\n// Many sites will have img tags with no source, or an image tag with a src\n// attribute that a is a placeholer. We need to be able to properly fill in\n// the src attribute so the images are no longer lazy loaded.\nexport default function convertLazyLoadedImages($) {\n  $('img').each((_, img) => {\n    const attrs = getAttrs(img);\n\n    Reflect.ownKeys(attrs).forEach(attr => {\n      const value = attrs[attr];\n\n      if (attr !== 'srcset' && IS_LINK.test(value) && IS_SRCSET.test(value)) {\n        $(img).attr('srcset', value);\n      } else if (\n        attr !== 'src' &&\n        attr !== 'srcset' &&\n        IS_LINK.test(value) &&\n        IS_IMAGE.test(value)\n      ) {\n        $(img).attr('src', value);\n      }\n    });\n  });\n\n  return $;\n}\n","import { TAGS_TO_REMOVE } from './constants';\n\nfunction isComment(index, node) {\n  return node.type === 'comment';\n}\n\nfunction cleanComments($) {\n  $.root()\n    .find('*')\n    .contents()\n    .filter(isComment)\n    .remove();\n\n  return $;\n}\n\nexport default function clean($) {\n  $(TAGS_TO_REMOVE).remove();\n\n  $ = cleanComments($);\n  return $;\n}\n","import cheerio from 'cheerio';\nimport iconv from 'iconv-lite';\n\nimport { getEncoding } from 'utils/text';\nimport { fetchResource } from './utils';\nimport { clean, convertLazyLoadedImages, normalizeMetaTags } from './utils/dom';\n\nconst Resource = {\n  // Create a Resource.\n  //\n  // :param url: The URL for the document we should retrieve.\n  // :param response: If set, use as the response rather than\n  //                  attempting to fetch it ourselves. Expects a\n  //                  string.\n  // :param headers: Custom headers to be included in the request\n  async create(url, preparedResponse, parsedUrl, headers = {}) {\n    let result;\n\n    if (preparedResponse) {\n      const validResponse = {\n        statusMessage: 'OK',\n        statusCode: 200,\n        headers: {\n          'content-type': 'text/html',\n          'content-length': 500,\n        },\n      };\n\n      result = { body: preparedResponse, response: validResponse };\n    } else {\n      result = await fetchResource(url, parsedUrl, headers);\n    }\n\n    if (result.error) {\n      result.failed = true;\n      return result;\n    }\n\n    return this.generateDoc(result);\n  },\n\n  generateDoc({ body: content, response }) {\n    const { 'content-type': contentType = '' } = response.headers;\n\n    // TODO: Implement is_text function from\n    // https://github.com/ReadabilityHoldings/readability/blob/8dc89613241d04741ebd42fa9fa7df1b1d746303/readability/utils/text.py#L57\n    if (!contentType.includes('html') && !contentType.includes('text')) {\n      throw new Error('Content does not appear to be text.');\n    }\n\n    let $ = this.encodeDoc({ content, contentType });\n\n    if ($.root().children().length === 0) {\n      throw new Error('No children, likely a bad parse.');\n    }\n\n    $ = normalizeMetaTags($);\n    $ = convertLazyLoadedImages($);\n    $ = clean($);\n\n    return $;\n  },\n\n  encodeDoc({ content, contentType }) {\n    const encoding = getEncoding(contentType);\n    let decodedContent = iconv.decode(content, encoding);\n    let $ = cheerio.load(decodedContent);\n\n    // after first cheerio.load, check to see if encoding matches\n    const contentTypeSelector = 'meta[http-equiv=content-type i]';\n    const metaContentType =\n      $(contentTypeSelector).attr('content') ||\n      $('meta[charset]').attr('charset');\n    const properEncoding = getEncoding(metaContentType);\n\n    // if encodings in the header/body dont match, use the one in the body\n    if (metaContentType && properEncoding !== encoding) {\n      decodedContent = iconv.decode(content, properEncoding);\n      $ = cheerio.load(decodedContent);\n    }\n\n    return $;\n  },\n};\n\nexport default Resource;\n","export default function* range(start = 1, end = 1) {\n  while (start <= end) {\n    yield (start += 1);\n  }\n}\n","// extremely simple url validation as a first step\nexport default function validateUrl({ hostname }) {\n  // If this isn't a valid url, return an error message\n  return !!hostname;\n}\n","const merge = (extractor, domains) =>\n  domains.reduce((acc, domain) => {\n    acc[domain] = extractor;\n    return acc;\n  }, {});\n\nexport default function mergeSupportedDomains(extractor) {\n  return extractor.supportedDomains\n    ? merge(extractor, [extractor.domain, ...extractor.supportedDomains])\n    : merge(extractor, [extractor.domain]);\n}\n","import mergeSupportedDomains from '../utils/merge-supported-domains';\n\nexport const apiExtractors = {};\n\nexport default function addExtractor(extractor) {\n  if (!extractor || !extractor.domain) {\n    return {\n      error: true,\n      message: 'Unable to add custom extractor. Invalid parameters.',\n    };\n  }\n\n  Object.assign(apiExtractors, mergeSupportedDomains(extractor));\n\n  return apiExtractors;\n}\n","export const BloggerExtractor = {\n  domain: 'blogspot.com',\n  content: {\n    // Blogger is insane and does not load its content\n    // initially in the page, but it's all there\n    // in noscript\n    selectors: ['.post-content noscript'],\n\n    // Selectors to remove from the extracted content\n    clean: [],\n\n    // Convert the noscript tag to a div\n    transforms: {\n      noscript: 'div',\n    },\n  },\n\n  author: {\n    selectors: ['.post-author-name'],\n  },\n\n  title: {\n    selectors: ['.post h2.title'],\n  },\n\n  date_published: {\n    selectors: ['span.publishdate'],\n  },\n};\n","export const NYMagExtractor = {\n  domain: 'nymag.com',\n  content: {\n    // Order by most likely. Extractor will stop on first occurrence\n    selectors: ['div.article-content', 'section.body', 'article.article'],\n\n    // Selectors to remove from the extracted content\n    clean: ['.ad', '.single-related-story'],\n\n    // Object of tranformations to make on matched elements\n    // Each key is the selector, each value is the tag to\n    // transform to.\n    // If a function is given, it should return a string\n    // to convert to or nothing (in which case it will not perform\n    // the transformation.\n    transforms: {\n      // Convert h1s to h2s\n      h1: 'h2',\n\n      // Convert lazy-loaded noscript images to figures\n      noscript: $node => {\n        const $children = $node.children();\n        if (\n          $children.length === 1 &&\n          $children.get(0) !== undefined &&\n          $children.get(0).tagName.toLowerCase() === 'img'\n        ) {\n          return 'figure';\n        }\n\n        return null;\n      },\n    },\n  },\n\n  title: {\n    selectors: ['h1.lede-feature-title', 'h1.headline-primary', 'h1'],\n  },\n\n  author: {\n    selectors: ['.by-authors', '.lede-feature-author'],\n  },\n\n  dek: {\n    selectors: ['.lede-feature-teaser'],\n  },\n\n  date_published: {\n    selectors: [\n      ['time.article-timestamp[datetime]', 'datetime'],\n      'time.article-timestamp',\n    ],\n  },\n};\n","export const WikipediaExtractor = {\n  domain: 'wikipedia.org',\n  content: {\n    selectors: ['#mw-content-text'],\n\n    defaultCleaner: false,\n\n    // transform top infobox to an image with caption\n    transforms: {\n      '.infobox img': $node => {\n        const $parent = $node.parents('.infobox');\n        // Only prepend the first image in .infobox\n        if ($parent.children('img').length === 0) {\n          $parent.prepend($node);\n        }\n      },\n      '.infobox caption': 'figcaption',\n      '.infobox': 'figure',\n    },\n\n    // Selectors to remove from the extracted content\n    clean: [\n      '.mw-editsection',\n      'figure tr, figure td, figure tbody',\n      '#toc',\n      '.navbox',\n    ],\n  },\n\n  author: 'Wikipedia Contributors',\n\n  title: {\n    selectors: ['h2.title'],\n  },\n\n  date_published: {\n    selectors: ['#footer-info-lastmod'],\n  },\n};\n","export const TwitterExtractor = {\n  domain: 'twitter.com',\n\n  content: {\n    transforms: {\n      // We're transforming essentially the whole page here.\n      // Twitter doesn't have nice selectors, so our initial\n      // selector grabs the whole page, then we're re-writing\n      // it to fit our needs before we clean it up.\n      '.permalink[role=main]': ($node, $) => {\n        const tweets = $node.find('.tweet');\n        const $tweetContainer = $('<div id=\"TWEETS_GO_HERE\"></div>');\n        $tweetContainer.append(tweets);\n        $node.replaceWith($tweetContainer);\n      },\n\n      // Twitter wraps @ with s, which\n      // renders as a strikethrough\n      s: 'span',\n    },\n\n    selectors: ['.permalink[role=main]'],\n\n    defaultCleaner: false,\n\n    clean: ['.stream-item-footer', 'button', '.tweet-details-fixer'],\n  },\n\n  author: {\n    selectors: ['.tweet.permalink-tweet .username'],\n  },\n\n  date_published: {\n    selectors: [['.permalink-tweet ._timestamp[data-time-ms]', 'data-time-ms']],\n  },\n};\n","export const NYTimesExtractor = {\n  domain: 'www.nytimes.com',\n\n  title: {\n    selectors: [\n      'h1.g-headline',\n      'h1[itemprop=\"headline\"]',\n      'h1.headline',\n      'h1 .balancedHeadline',\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      '.g-byline',\n      '.byline',\n      ['meta[name=\"byl\"]', 'value'],\n    ],\n  },\n\n  content: {\n    selectors: ['div.g-blocks', 'section[name=\"articleBody\"]', 'article#story'],\n\n    transforms: {\n      'img.g-lazy': $node => {\n        let src = $node.attr('src');\n        const width = 640;\n\n        src = src.replace('{{size}}', width);\n        $node.attr('src', src);\n      },\n    },\n\n    clean: [\n      '.ad',\n      'header#story-header',\n      '.story-body-1 .lede.video',\n      '.visually-hidden',\n      '#newsletter-promo',\n      '.promo',\n      '.comments-button',\n      '.hidden',\n      '.comments',\n      '.supplemental',\n      '.nocontent',\n      '.story-footer-links',\n    ],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: null,\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\nexport const TheAtlanticExtractor = {\n  domain: 'www.theatlantic.com',\n  title: {\n    selectors: ['h1', '.c-article-header__hed'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value'], '.c-byline__author'],\n  },\n\n  content: {\n    selectors: ['article', '.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.partner-box',\n      '.callout',\n      '.c-article-writer__image',\n      '.c-article-writer__content',\n      '.c-letters-cta__text',\n      '.c-footer__logo',\n      '.c-recirculation-link',\n      '.twitter-tweet',\n    ],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['time[itemprop=\"datePublished\"]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['img[itemprop=\"url\"]', 'src']],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const NewYorkerExtractor = {\n  domain: 'www.newyorker.com',\n  title: {\n    selectors: [\n      'h1[class^=\"ArticleHeader__hed\"]',\n      ['meta[name=\"og:title\"]', 'value'],\n    ],\n  },\n\n  author: {\n    selectors: [\n      'div[class^=\"ArticleContributors\"] a[rel=\"author\"]',\n      'article header div[class*=\"Byline__multipleContributors\"]',\n    ],\n  },\n\n  content: {\n    selectors: ['main[class^=\"Layout__content\"]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['footer[class^=\"ArticleFooter__footer\"]'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"pubdate\"]', 'value']],\n    format: 'YYYYMMDD',\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2[class^=\"ArticleHeader__dek\"]'],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const WiredExtractor = {\n  domain: 'www.wired.com',\n  title: {\n    selectors: [\n      'h1.post-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'a[rel=\"author\"]',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      'article.content',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.visually-hidden', 'figcaption img.photo'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const MSNExtractor = {\n  domain: 'www.msn.com',\n  title: {\n    selectors: [\n      'h1',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'span.authorname-txt',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      'div.richtext',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span.caption'],\n  },\n\n  date_published: {\n    selectors: ['span.time'],\n  },\n\n  lead_image_url: {\n    selectors: [],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const YahooExtractor = {\n  domain: 'www.yahoo.com',\n  title: {\n    selectors: [\n      'header.canvas-header',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'span.provider-name',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      // enter content selectors\n      '.content-canvas',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.figure-caption'],\n  },\n\n  date_published: {\n    selectors: [['time.date[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter dek selectors\n    ],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const BuzzfeedExtractor = {\n  domain: 'www.buzzfeed.com',\n  title: {\n    selectors: [\n      'h1[id=\"post-title\"]',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'a[data-action=\"user/username\"]',\n      'byline__author',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      ['.longform_custom_header_media', '#buzz_sub_buzz'],\n      '#buzz_sub_buzz',\n    ],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: 'b',\n\n      'div.longform_custom_header_media': $node => {\n        if ($node.has('img') && $node.has('.longform_header_image_source')) {\n          return 'figure';\n        }\n\n        return null;\n      },\n\n      'figure.longform_custom_header_media .longform_header_image_source':\n        'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.instapaper_ignore',\n      '.suplist_list_hide .buzz_superlist_item .buzz_superlist_number_inline',\n      '.share-box',\n      '.print',\n    ],\n  },\n\n  date_published: {\n    selectors: ['.buzz-datetime'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const WikiaExtractor = {\n  domain: 'fandom.wikia.com',\n  title: {\n    selectors: [\n      'h1.entry-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      '.author vcard',\n      '.fn',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      '.grid-content',\n      '.entry-content',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const LittleThingsExtractor = {\n  domain: 'www.littlethings.com',\n  title: {\n    selectors: [\n      'h1.post-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      // enter content selectors\n      '.mainContentIntro',\n      '.content-wrapper',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const PoliticoExtractor = {\n  domain: 'www.politico.com',\n  title: {\n    selectors: [\n      // enter title selectors\n      ['meta[name=\"og:title\"]', 'value'],\n    ],\n  },\n\n  author: {\n    selectors: ['.story-main-content .byline .vcard'],\n  },\n\n  content: {\n    selectors: [\n      // enter content selectors\n      '.story-main-content',\n      '.content-group',\n      '.story-core',\n      '.story-text',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['figcaption'],\n  },\n\n  date_published: {\n    selectors: [['.story-main-content .timestamp time[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [\n      // enter lead_image_url selectors\n      ['meta[name=\"og:image\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","export const DeadspinExtractor = {\n  domain: 'deadspin.com',\n\n  supportedDomains: [\n    'jezebel.com',\n    'lifehacker.com',\n    'kotaku.com',\n    'gizmodo.com',\n    'jalopnik.com',\n    'kinja.com',\n    'avclub.com',\n    'clickhole.com',\n    'splinternews.com',\n    'theonion.com',\n    'theroot.com',\n    'thetakeout.com',\n    'theinventory.com',\n  ],\n\n  title: {\n    selectors: ['h1.headline'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  content: {\n    selectors: ['.post-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'iframe.lazyload[data-recommend-id^=\"youtube://\"]': $node => {\n        const youtubeId = $node.attr('id').split('youtube-')[1];\n        $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.magnifier', '.lightbox'],\n  },\n\n  date_published: {\n    selectors: [['time.updated[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const BroadwayWorldExtractor = {\n  domain: 'www.broadwayworld.com',\n  title: {\n    selectors: ['h1.article-title'],\n  },\n\n  author: {\n    selectors: ['span[itemprop=author]'],\n  },\n\n  content: {\n    selectors: ['div[itemprop=articlebody]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=datePublished]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const ApartmentTherapyExtractor = {\n  domain: 'www.apartmenttherapy.com',\n  title: {\n    selectors: ['h1.headline'],\n  },\n\n  author: {\n    selectors: ['.PostByline__name'],\n  },\n\n  content: {\n    selectors: ['div.post__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div[data-render-react-id=\"images/LazyPicture\"]': ($node, $) => {\n        const data = JSON.parse($node.attr('data-props'));\n        const { src } = data.sources[0];\n        const $img = $('<img />').attr('src', src);\n        $node.replaceWith($img);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['.PostByline__timestamp[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","export const MediumExtractor = {\n  domain: 'medium.com',\n\n  title: {\n    selectors: ['h1', ['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // Re-write lazy-loaded youtube videos\n      iframe: $node => {\n        const ytRe = /https:\\/\\/i.embed.ly\\/.+url=https:\\/\\/i\\.ytimg\\.com\\/vi\\/(\\w+)\\//;\n        const thumb = decodeURIComponent($node.attr('data-thumbnail'));\n        const $parent = $node.parents('figure');\n\n        if (ytRe.test(thumb)) {\n          const [_, youtubeId] = thumb.match(ytRe); // eslint-disable-line\n          $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\n          const $caption = $parent.find('figcaption');\n          $parent.empty().append([$node, $caption]);\n          return;\n        }\n\n        // If we can't draw the YouTube preview, remove the figure.\n        $parent.remove();\n      },\n\n      // rewrite figures to pull out image and caption, remove rest\n      figure: $node => {\n        // ignore if figure has an iframe\n        if ($node.find('iframe').length > 0) return;\n\n        const $img = $node.find('img').slice(-1)[0];\n        const $caption = $node.find('figcaption');\n\n        $node.empty().append([$img, $caption]);\n      },\n\n      // Remove any smaller images that did not get caught by the generic image\n      // cleaner (author photo 48px, leading sentence images 79px, etc.).\n      img: $node => {\n        const width = parseInt($node.attr('width'), 10);\n        if (width < 100) $node.remove();\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span', 'svg'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: null,\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","export const WwwTmzComExtractor = {\n  domain: 'www.tmz.com',\n\n  title: {\n    selectors: ['.post-title-breadcrumb', 'h1', '.headline'],\n  },\n\n  author: 'TMZ STAFF',\n\n  date_published: {\n    selectors: ['.article-posted-date'],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-content', '.all-post-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.lightbox-link'],\n  },\n};\n","export const WwwWashingtonpostComExtractor = {\n  domain: 'www.washingtonpost.com',\n\n  title: {\n    selectors: ['h1', '#topper-headline-wrapper'],\n  },\n\n  author: {\n    selectors: ['.pb-author-name'],\n  },\n\n  date_published: {\n    selectors: [['.author-timestamp[itemprop=\"datePublished\"]', 'content']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.inline-content': $node => {\n        if ($node.has('img,iframe,video').length > 0) {\n          return 'figure';\n        }\n\n        $node.remove();\n        return null;\n      },\n      '.pb-caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.interstitial-link', '.newsletter-inline-unit'],\n  },\n};\n","export const WwwHuffingtonpostComExtractor = {\n  domain: 'www.huffingtonpost.com',\n\n  title: {\n    selectors: ['h1.headline__title'],\n  },\n\n  author: {\n    selectors: ['span.author-card__details__name'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:modified_time\"]', 'value'],\n      ['meta[name=\"article:published_time\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: ['h2.headline__subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry__body'],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.pull-quote',\n      '.tag-cloud',\n      '.embed-asset',\n      '.below-entry',\n      '.entry-corrections',\n      '#suggested-story',\n    ],\n  },\n};\n","export const NewrepublicComExtractor = {\n  domain: 'newrepublic.com',\n\n  title: {\n    selectors: ['h1.article-headline', '.minutes-primary h1.minute-title'],\n  },\n\n  author: {\n    selectors: ['div.author-list', '.minutes-primary h3.minute-byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['h2.article-subhead'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.article-cover', 'div.content-body'],\n      ['.minute-image', '.minutes-primary div.content-body'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['aside'],\n  },\n};\n","export const MoneyCnnComExtractor = {\n  domain: 'money.cnn.com',\n\n  title: {\n    selectors: ['.article-title'],\n  },\n\n  author: {\n    selectors: ['.byline a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n\n    timezone: 'GMT',\n  },\n\n  dek: {\n    selectors: ['#storytext h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#storytext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.inStoryHeading'],\n  },\n};\n","export const WwwThevergeComExtractor = {\n  domain: 'www.theverge.com',\n\n  supportedDomains: ['www.polygon.com'],\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      // feature template multi-match\n      ['.c-entry-hero .e-image', '.c-entry-intro', '.c-entry-content'],\n      // regular post multi-match\n      ['.e-image--hero', '.c-entry-content'],\n      // feature template fallback\n      '.l-wrapper .l-feature',\n      // regular post fallback\n      'div.c-entry-content',\n    ],\n\n    // Transform lazy-loaded images\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'span';\n        }\n\n        return null;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.aside',\n      'img.c-dynamic-image', // images come from noscript transform\n    ],\n  },\n};\n","export const WwwCnnComExtractor = {\n  domain: 'www.cnn.com',\n\n  title: {\n    selectors: ['h1.pg-headline', 'h1'],\n  },\n\n  author: {\n    selectors: ['.metadata__byline__author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"pubdate\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      // a more specific selector to grab the lead image and the body\n      ['.media__video--thumbnail', '.zn-body-text'],\n      // a fallback for the above\n      '.zn-body-text',\n      'div[itemprop=\"articleBody\"]',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.zn-body__paragraph, .el__leafmedia--sourced-paragraph': $node => {\n        const $text = $node.html();\n        if ($text) {\n          return 'p';\n        }\n\n        return null;\n      },\n\n      // this transform cleans the short, all-link sections linking\n      // to related content but not marked as such in any way.\n      '.zn-body__paragraph': $node => {\n        if ($node.has('a')) {\n          if (\n            $node.text().trim() ===\n            $node\n              .find('a')\n              .text()\n              .trim()\n          ) {\n            $node.remove();\n          }\n        }\n      },\n\n      '.media__video--thumbnail': 'figure',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAolComExtractor = {\n  domain: 'www.aol.com',\n\n  title: {\n    selectors: ['h1.p-article__title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['.p-article__byline__date'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwYoutubeComExtractor = {\n  domain: 'www.youtube.com',\n\n  title: {\n    selectors: ['.watch-title', 'h1.watch-title-container'],\n  },\n\n  author: {\n    selectors: ['.yt-user-info'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemProp=\"datePublished\"]', 'value']],\n\n    timezone: 'GMT',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    defaultCleaner: false,\n\n    selectors: [['#player-api', '#eow-description']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '#player-api': ($node, $) => {\n        const videoId = $('meta[itemProp=\"videoId\"]').attr('value');\n        $node.html(`\n          <iframe src=\"https://www.youtube.com/embed/${videoId}\" frameborder=\"0\" allowfullscreen></iframe>`);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwTheguardianComExtractor = {\n  domain: 'www.theguardian.com',\n\n  title: {\n    selectors: ['.content__headline'],\n  },\n\n  author: {\n    selectors: ['p.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.content__standfirst'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.content__article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.hide-on-mobile', '.inline-icon'],\n  },\n};\n","export const WwwSbnationComExtractor = {\n  domain: 'www.sbnation.com',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.c-entry-summary.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.c-entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwBloombergComExtractor = {\n  domain: 'www.bloomberg.com',\n\n  title: {\n    selectors: [\n      // normal articles\n      '.lede-headline',\n\n      // /graphics/ template\n      'h1.article-title',\n\n      // /news/ template\n      'h1.lede-text-only__hed',\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"parsely-author\"]', 'value'],\n      '.byline-details__link',\n\n      // /graphics/ template\n      '.bydek',\n\n      // /news/ template\n      '.author',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['time.published-at', 'datetime'],\n      ['time[datetime]', 'datetime'],\n      ['meta[name=\"date\"]', 'value'],\n      ['meta[name=\"parsely-pub-date\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      '.article-body__content',\n\n      // /graphics/ template\n      ['section.copy-block'],\n\n      // /news/ template\n      '.body-copy',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.inline-newsletter', '.page-ad'],\n  },\n};\n","export const WwwBustleComExtractor = {\n  domain: 'www.bustle.com',\n\n  title: {\n    selectors: ['h1.post-page__title'],\n  },\n\n  author: {\n    selectors: ['div.content-meta__author'],\n  },\n\n  date_published: {\n    selectors: [['time.content-meta__published-date[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.post-page__body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwNprOrgExtractor = {\n  domain: 'www.npr.org',\n\n  title: {\n    selectors: ['h1', '.storytitle'],\n  },\n\n  author: {\n    selectors: ['p.byline__name.byline__name--block'],\n  },\n\n  date_published: {\n    selectors: [\n      ['.dateblock time[datetime]', 'datetime'],\n      ['meta[name=\"date\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[name=\"twitter:image:src\"]', 'value'],\n    ],\n  },\n\n  content: {\n    selectors: ['.storytext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.bucketwrap.image': 'figure',\n      '.bucketwrap.image .credit-caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['div.enlarge_measure'],\n  },\n};\n","export const WwwRecodeNetExtractor = {\n  domain: 'www.recode.net',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.c-entry-summary.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['figure.e-image--hero', '.c-entry-content'],\n      '.c-entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const QzComExtractor = {\n  domain: 'qz.com',\n\n  title: {\n    selectors: ['header.item-header.content-width-responsive'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['.timestamp'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['figure.featured-image', '.item-body'], '.item-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.article-aside', '.progressive-image-thumbnail'],\n  },\n};\n","export const WwwDmagazineComExtractor = {\n  domain: 'www.dmagazine.com',\n\n  title: {\n    selectors: ['h1.story__title'],\n  },\n\n  author: {\n    selectors: ['.story__info .story__info__item:first-child'],\n  },\n\n  date_published: {\n    selectors: [\n      // enter selectors\n      '.story__info',\n    ],\n\n    timezone: 'America/Chicago',\n  },\n\n  dek: {\n    selectors: ['.story__subhead'],\n  },\n\n  lead_image_url: {\n    selectors: [['article figure a:first-child', 'href']],\n  },\n\n  content: {\n    selectors: ['.story__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwReutersComExtractor = {\n  domain: 'www.reuters.com',\n\n  title: {\n    selectors: ['h1.article-headline'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#article-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.article-subtitle': 'h4',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['#article-byline .author'],\n  },\n};\n","export const MashableComExtractor = {\n  domain: 'mashable.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  author: {\n    selectors: ['span.author_name a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['section.article-content.blueprint'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.image-credit': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwChicagotribuneComExtractor = {\n  domain: 'www.chicagotribune.com',\n\n  title: {\n    selectors: ['h1.trb_ar_hl_t'],\n  },\n\n  author: {\n    selectors: ['span.trb_ar_by_nm_au'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.trb_ar_page'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwVoxComExtractor = {\n  domain: 'www.vox.com',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['figure.e-image--hero', '.c-entry-content'],\n      '.c-entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'figure .e-image__image noscript': $node => {\n        const imgHtml = $node.html();\n        $node\n          .parents('.e-image__image')\n          .find('.c-dynamic-image')\n          .replaceWith(imgHtml);\n      },\n\n      'figure .e-image__meta': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const NewsNationalgeographicComExtractor = {\n  domain: 'news.nationalgeographic.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: ['.byline-component__contributors b span'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n    format: 'ddd MMM DD HH:mm:ss zz YYYY',\n    timezone: 'EST',\n  },\n\n  dek: {\n    selectors: ['.article__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.parsys.content', '.__image-lead__'], '.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.parsys.content': ($node, $) => {\n        const $imgSrc = $node\n          .find('.image.parbase.section')\n          .find('.picturefill')\n          .first()\n          .data('platform-src');\n        if ($imgSrc) {\n          $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote.pull-quote--large'],\n  },\n};\n","export const WwwNationalgeographicComExtractor = {\n  domain: 'www.nationalgeographic.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: ['.byline-component__contributors b span'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.article__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.parsys.content', '.__image-lead__'], '.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.parsys.content': ($node, $) => {\n        const $imageParent = $node.children().first();\n        if ($imageParent.hasClass('imageGroup')) {\n          const $dataAttrContainer = $imageParent\n            .find('.media--medium__container')\n            .children()\n            .first();\n          const imgPath1 = $dataAttrContainer.data('platform-image1-path');\n          const imgPath2 = $dataAttrContainer.data('platform-image2-path');\n          if (imgPath2 && imgPath1) {\n            $node.prepend(\n              $(`<div class=\"__image-lead__\">\n                <img src=\"${imgPath1}\"/>\n                <img src=\"${imgPath2}\"/>\n              </div>`)\n            );\n          }\n        } else {\n          const $imgSrc = $node\n            .find('.image.parbase.section')\n            .find('.picturefill')\n            .first()\n            .data('platform-src');\n          if ($imgSrc) {\n            $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\n          }\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote.pull-quote--small'],\n  },\n};\n","export const WwwLatimesComExtractor = {\n  domain: 'www.latimes.com',\n\n  title: {\n    selectors: ['.trb_ar_hl'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.trb_ar_main'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.trb_ar_la': $node => {\n        const $figure = $node.find('figure');\n        $node.replaceWith($figure);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.trb_ar_by', '.trb_ar_cr'],\n  },\n};\n","export const PagesixComExtractor = {\n  domain: 'pagesix.com',\n\n  supportedDomains: ['nypost.com'],\n\n  title: {\n    selectors: ['h1 a'],\n  },\n\n  author: {\n    selectors: ['.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['#featured-image-wrapper', '.entry-content'],\n      '.entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '#featured-image-wrapper': 'figure',\n      '.wp-caption-text': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.modal-trigger'],\n  },\n};\n","export const ThefederalistpapersOrgExtractor = {\n  domain: 'thefederalistpapers.org',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['main span.entry-author-name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [['p[style]']],\n  },\n};\n","export const WwwCbssportsComExtractor = {\n  domain: 'www.cbssports.com',\n\n  title: {\n    selectors: ['.article-headline'],\n  },\n\n  author: {\n    selectors: ['.author-name'],\n  },\n\n  date_published: {\n    selectors: [['.date-original-reading-time time', 'datetime']],\n    timezone: 'UTC',\n  },\n\n  dek: {\n    selectors: ['.article-subline'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMsnbcComExtractor = {\n  domain: 'www.msnbc.com',\n\n  title: {\n    selectors: ['h1', 'h1.is-title-pane'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.pane-node-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.pane-node-body': ($node, $) => {\n        const [\n          selector,\n          attr,\n        ] = WwwMsnbcComExtractor.lead_image_url.selectors[0];\n        const src = $(selector).attr(attr);\n        if (src) {\n          $node.prepend(`<img src=\"${src}\" />`);\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwThepoliticalinsiderComExtractor = {\n  domain: 'www.thepoliticalinsider.com',\n\n  title: {\n    selectors: [['meta[name=\"sailthru.title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"sailthru.author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'], // enter selectors\n    ],\n  },\n\n  content: {\n    selectors: ['div#article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMentalflossComExtractor = {\n  domain: 'www.mentalfloss.com',\n\n  title: {\n    selectors: ['h1.title', '.title-group', '.inner'],\n  },\n\n  author: {\n    selectors: ['.field-name-field-enhanced-authors'],\n  },\n\n  date_published: {\n    selectors: ['.date-display-single'],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.field.field-name-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const AbcnewsGoComExtractor = {\n  domain: 'abcnews.go.com',\n\n  title: {\n    selectors: ['.article-header h1'],\n  },\n\n  author: {\n    selectors: ['.authors'],\n    clean: ['.author-overlay', '.by-text'],\n  },\n\n  date_published: {\n    selectors: ['.timestamp'],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-copy'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwNydailynewsComExtractor = {\n  domain: 'www.nydailynews.com',\n\n  title: {\n    selectors: ['h1#ra-headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"parsely-author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article#ra-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['dl#ra-tags', '.ra-related', 'a.ra-editor', 'dl#ra-share-bottom'],\n  },\n};\n","export const WwwCnbcComExtractor = {\n  domain: 'www.cnbc.com',\n\n  title: {\n    selectors: ['h1.title', 'h1.ArticleHeader-headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div#article_body.content',\n      'div.story',\n      'div.ArticleBody-articleBody',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwPopsugarComExtractor = {\n  domain: 'www.popsugar.com',\n\n  title: {\n    selectors: ['h2.post-title', 'title-text'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.share-copy-title', '.post-tags', '.reactions'],\n  },\n};\n","export const ObserverComExtractor = {\n  domain: 'observer.com',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['.author', '.vcard'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const PeopleComExtractor = {\n  domain: 'people.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['a.author.url.fn'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body__inner'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwUsmagazineComExtractor = {\n  domain: 'www.usmagazine.com',\n\n  title: {\n    selectors: ['header h1'],\n  },\n\n  author: {\n    selectors: ['a.article-byline.tracked-offpage'],\n  },\n\n  date_published: {\n    timezone: 'America/New_York',\n\n    selectors: ['time.article-published-date'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body-inner'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.module-related'],\n  },\n};\n","export const WwwRollingstoneComExtractor = {\n  domain: 'www.rollingstone.com',\n\n  title: {\n    selectors: ['h1.content-title'],\n  },\n\n  author: {\n    selectors: ['a.content-author.tracked-offpage'],\n  },\n\n  date_published: {\n    selectors: ['time.content-published-date'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.content-description'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.lead-container', '.article-content'], '.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.module-related'],\n  },\n};\n","export const twofortysevensportsComExtractor = {\n  domain: '247sports.com',\n\n  title: {\n    selectors: ['title', 'article header h1'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  date_published: {\n    selectors: [['time[data-published]', 'data-published']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['section.body.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const UproxxComExtractor = {\n  domain: 'uproxx.com',\n\n  title: {\n    selectors: ['div.post-top h1'],\n  },\n\n  author: {\n    selectors: ['.post-top .authorname'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.post-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.image': 'figure',\n      'div.image .wp-media-credit': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwEonlineComExtractor = {\n  domain: 'www.eonline.com',\n\n  title: {\n    selectors: ['h1.article__title'],\n  },\n\n  author: {\n    selectors: ['.entry-meta__author a'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.post-content section, .post-content div.post-content__image'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.post-content__image': 'figure',\n      'div.post-content__image .image__credits': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMiamiheraldComExtractor = {\n  domain: 'www.miamiherald.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  date_published: {\n    selectors: ['p.published-date'],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.dateline-storybody'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwRefinery29ComExtractor = {\n  domain: 'www.refinery29.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  author: {\n    selectors: ['.contributor'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.full-width-opener', '.article-content'],\n      '.article-content',\n      '.body',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.loading noscript': $node => {\n        const imgHtml = $node.html();\n        $node.parents('.loading').replaceWith(imgHtml);\n      },\n\n      '.section-image': 'figure',\n\n      '.section-image .content-caption': 'figcaption',\n\n      '.section-text': 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.story-share'],\n  },\n};\n","export const WwwMacrumorsComExtractor = {\n  domain: 'www.macrumors.com',\n\n  title: {\n    selectors: ['h1', 'h1.title'],\n  },\n\n  author: {\n    selectors: ['.author-url'],\n  },\n\n  date_published: {\n    selectors: ['.article .byline'],\n\n    // Wednesday January 18, 2017 11:44 am PST\n    format: 'dddd MMMM D, YYYY h:mm A zz',\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAndroidcentralComExtractor = {\n  domain: 'www.androidcentral.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: ['.meta-by'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['.image-large', 'src']],\n  },\n\n  content: {\n    selectors: ['.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.intro', 'blockquote'],\n  },\n};\n","export const WwwSiComExtractor = {\n  domain: 'www.si.com',\n\n  title: {\n    selectors: ['h1', 'h1.headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['.timestamp'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.quick-hit ul'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['p', '.marquee_large_2x', '.component.image']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'figure';\n        }\n\n        return null;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      ['.inline-thumb', '.primary-message', '.description', '.instructions'],\n    ],\n  },\n};\n","export const WwwRawstoryComExtractor = {\n  domain: 'www.rawstory.com',\n\n  title: {\n    selectors: ['.blog-title'],\n  },\n\n  author: {\n    selectors: ['.blog-author a:first-of-type'],\n  },\n\n  date_published: {\n    selectors: ['.blog-author a:last-of-type'],\n\n    timezone: 'EST',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.blog-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwCnetComExtractor = {\n  domain: 'www.cnet.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['a.author'],\n  },\n\n  date_published: {\n    selectors: ['time'],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: ['.article-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['img.__image-lead__', '.article-main-body'],\n      '.article-main-body',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'figure.image': $node => {\n        const $img = $node.find('img');\n        $img.attr('width', '100%');\n        $img.attr('height', '100%');\n        $img.addClass('__image-lead__');\n        $node.remove('.imgContainer').prepend($img);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwCinemablendComExtractor = {\n  domain: 'www.cinemablend.com',\n\n  title: {\n    selectors: ['.story_title'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n\n    timezone: 'EST',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div#wrap_left_content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwTodayComExtractor = {\n  domain: 'www.today.com',\n\n  title: {\n    selectors: ['h1.entry-headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-container'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.label-comment'],\n  },\n};\n","export const WwwHowtogeekComExtractor = {\n  domain: 'www.howtogeek.com',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: {\n    selectors: ['#authorinfobox a'],\n  },\n\n  date_published: {\n    selectors: ['#authorinfobox + div li'],\n    timezone: 'GMT',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.thecontent'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAlComExtractor = {\n  domain: 'www.al.com',\n\n  title: {\n    selectors: [['meta[name=\"title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article_author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article_date_original\"]', 'value']],\n    timezone: 'EST',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwThepennyhoarderComExtractor = {\n  domain: 'www.thepennyhoarder.com',\n\n  title: {\n    selectors: [['meta[name=\"dcterms.title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['link[rel=\"author\"]', 'title']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.post-img', '.post-text'], '.post-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwWesternjournalismComExtractor = {\n  domain: 'www.westernjournalism.com',\n\n  title: {\n    selectors: ['title', 'h1.entry-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-sharing.top + div'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.ad-notice-small'],\n  },\n};\n","export const FusionNetExtractor = {\n  domain: 'fusion.net',\n\n  title: {\n    selectors: ['.post-title', '.single-title', '.headline'],\n  },\n\n  author: {\n    selectors: ['.show-for-medium .byline'],\n  },\n\n  date_published: {\n    selectors: [['time.local-time', 'datetime']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.post-featured-media', '.article-content'],\n      '.article-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.fusion-youtube-oembed': 'figure',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAmericanowComExtractor = {\n  domain: 'www.americanow.com',\n\n  title: {\n    selectors: ['.title', ['meta[name=\"title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"publish_date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.article-content', '.image', '.body'], '.body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.article-video-wrapper', '.show-for-small-only'],\n  },\n};\n","export const ScienceflyComExtractor = {\n  domain: 'sciencefly.com',\n\n  title: {\n    selectors: ['.entry-title', '.cb-entry-title', '.cb-single-title'],\n  },\n\n  author: {\n    selectors: ['div.cb-author', 'div.cb-author-title'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['div.theiaPostSlider_slides img', 'src']],\n  },\n\n  content: {\n    selectors: ['div.theiaPostSlider_slides'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const HellogigglesComExtractor = {\n  domain: 'hellogiggles.com',\n\n  title: {\n    selectors: ['.title'],\n  },\n\n  author: {\n    selectors: ['.author-link'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ThoughtcatalogComExtractor = {\n  domain: 'thoughtcatalog.com',\n\n  title: {\n    selectors: ['h1.title', ['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      'div.col-xs-12.article_header div.writer-container.writer-container-inline.writer-no-avatar h4.writer-name',\n      'h1.writer-name',\n    ],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry.post'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.tc_mark'],\n  },\n};\n","export const WwwNjComExtractor = {\n  domain: 'www.nj.com',\n\n  title: {\n    selectors: [['meta[name=\"title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article_author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article_date_original\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwInquisitrComExtractor = {\n  domain: 'www.inquisitr.com',\n\n  title: {\n    selectors: ['h1.entry-title.story--header--title'],\n  },\n\n  author: {\n    selectors: ['div.story--header--author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"datePublished\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article.story', '.entry-content.'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.post-category',\n      '.story--header--socials',\n      '.story--header--content',\n    ],\n  },\n};\n","export const WwwNbcnewsComExtractor = {\n  domain: 'www.nbcnews.com',\n\n  title: {\n    selectors: ['div.article-hed h1'],\n  },\n\n  author: {\n    selectors: ['span.byline_author'],\n  },\n\n  date_published: {\n    selectors: [\n      ['.flag_article-wrapper time.timestamp_article[datetime]', 'datetime'],\n      '.flag_article-wrapper time',\n    ],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const FortuneComExtractor = {\n  domain: 'fortune.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['.MblGHNMJ'],\n\n    timezone: 'UTC',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['picture', 'article.row'], 'article.row'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwLinkedinComExtractor = {\n  domain: 'www.linkedin.com',\n\n  title: {\n    selectors: ['.article-title', 'h1'],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"article:author\"]', 'value'],\n      '.entity-name a[rel=author]',\n    ],\n  },\n\n  date_published: {\n    selectors: [['time[itemprop=\"datePublished\"]', 'datetime']],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['header figure', '.prose'], '.prose'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.entity-image'],\n  },\n};\n","export const ObamawhitehouseArchivesGovExtractor = {\n  domain: 'obamawhitehouse.archives.gov',\n\n  supportedDomains: ['whitehouse.gov'],\n\n  title: {\n    selectors: ['h1', '.pane-node-title'],\n  },\n\n  author: {\n    selectors: ['.blog-author-link', '.node-person-name-link'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.field-name-field-forall-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    defaultCleaner: false,\n\n    selectors: ['div#content-start', '.pane-node-field-forall-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pane-node-title', '.pane-custom.pane-1'],\n  },\n};\n","export const WwwOpposingviewsComExtractor = {\n  domain: 'www.opposingviews.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  author: {\n    selectors: ['div.date span span a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"publish_date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.show-for-small-only'],\n  },\n};\n","export const WwwProspectmagazineCoUkExtractor = {\n  domain: 'www.prospectmagazine.co.uk',\n\n  title: {\n    selectors: ['.page-title'],\n  },\n\n  author: {\n    selectors: ['.aside_author .title'],\n  },\n\n  date_published: {\n    selectors: ['.post-info'],\n\n    timezone: 'Europe/London',\n  },\n\n  dek: {\n    selectors: ['.page-subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article .post_content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ForwardComExtractor = {\n  domain: 'forward.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['.author-name', ['meta[name=\"sailthru.author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.post-item-media-wrap', '.post-item p']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.donate-box', '.message', '.subtitle'],\n  },\n};\n","export const WwwQdailyComExtractor = {\n  domain: 'www.qdaily.com',\n\n  title: {\n    selectors: ['h2', 'h2.title'],\n  },\n\n  author: {\n    selectors: ['.name'],\n  },\n\n  date_published: {\n    selectors: [['.date.smart-date', 'data-origindate']],\n  },\n\n  dek: {\n    selectors: ['.excerpt'],\n  },\n\n  lead_image_url: {\n    selectors: [['.article-detail-hd img', 'src']],\n  },\n\n  content: {\n    selectors: ['.detail'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.lazyload', '.lazylad', '.lazylood'],\n  },\n};\n","export const GothamistComExtractor = {\n  domain: 'gothamist.com',\n\n  supportedDomains: [\n    'chicagoist.com',\n    'laist.com',\n    'sfist.com',\n    'shanghaiist.com',\n    'dcist.com',\n  ],\n\n  title: {\n    selectors: ['h1', '.entry-header h1'],\n  },\n\n  author: {\n    selectors: ['.author'],\n  },\n\n  date_published: {\n    selectors: ['abbr', 'abbr.published'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [null],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.image-none': 'figure',\n      '.image-none i': 'figcaption',\n      'div.image-left': 'figure',\n      '.image-left i': 'figcaption',\n      'div.image-right': 'figure',\n      '.image-right i': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.image-none br',\n      '.image-left br',\n      '.image-right br',\n      '.galleryEase',\n    ],\n  },\n};\n","export const WwwFoolComExtractor = {\n  domain: 'www.fool.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.author-inline .author-name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['header h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.caption img': $node => {\n        const src = $node.attr('src');\n        $node.parent().replaceWith(`<figure><img src=\"${src}\"/></figure>`);\n      },\n      '.caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['#pitch'],\n  },\n};\n","export const WwwSlateComExtractor = {\n  domain: 'www.slate.com',\n\n  title: {\n    selectors: ['.hed', 'h1'],\n  },\n\n  author: {\n    selectors: ['a[rel=author]'],\n  },\n\n  date_published: {\n    selectors: ['.pub-date'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.about-the-author',\n      '.pullquote',\n      '.newsletter-signup-component',\n      '.top-comment',\n    ],\n  },\n};\n","export const IciRadioCanadaCaExtractor = {\n  domain: 'ici.radio-canada.ca',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"dc.creator\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"dc.date.created\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.bunker-component.lead'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.main-multimedia-item', '.news-story-content']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwFortinetComExtractor = {\n  domain: 'www.fortinet.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.b15-blog-meta__author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div.responsivegrid.aem-GridColumn.aem-GridColumn--default--12',\n    ],\n\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'figure';\n        }\n        return null;\n      },\n    },\n  },\n};\n","export const WwwFastcompanyComExtractor = {\n  domain: 'www.fastcompany.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.post__by'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.post__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.post__article'],\n  },\n};\n","export const BlisterreviewComExtractor = {\n  domain: 'blisterreview.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['span.author-name'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['time.entry-date', 'datetime'],\n      ['meta[itemprop=\"datePublished\"]', 'content'],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[property=\"og:image\"]', 'content'],\n      ['meta[itemprop=\"image\"]', 'content'],\n      ['meta[name=\"twitter:image\"]', 'content'],\n      ['img.attachment-large', 'src'],\n    ],\n  },\n\n  content: {\n    selectors: [\n      [\n        '.elementor-section-wrap',\n        '.elementor-text-editor > p, .elementor-text-editor > ul > li, .attachment-large, .wp-caption-text',\n      ],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      figcaption: 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.comments-area'],\n  },\n};\n","export const NewsMynaviJpExtractor = {\n  domain: 'news.mynavi.jp',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['main div.article-author a.article-author__name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['main article div'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      img: $node => {\n        const src = $node.attr('data-original');\n        if (src !== '') {\n          $node.attr('src', src);\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ClinicaltrialsGovExtractor = {\n  domain: 'clinicaltrials.gov',\n\n  title: {\n    selectors: ['h1.tr-solo_record'],\n  },\n\n  author: {\n    selectors: ['div#sponsor.tr-info-text'],\n  },\n\n  date_published: {\n    // selectors: ['span.term[data-term=\"Last Update Posted\"]'],\n    selectors: ['div:has(> span.term[data-term=\"Last Update Posted\"])'],\n  },\n\n  content: {\n    selectors: ['div#tab-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.usa-alert> img'],\n  },\n};\n","export const GithubComExtractor = {\n  domain: 'github.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      // enter author selectors\n    ],\n  },\n\n  date_published: {\n    selectors: [['span[itemprop=\"dateModified\"] relative-time', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['span[itemprop=\"about\"]'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['#readme article']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwRedditComExtractor = {\n  domain: 'www.reddit.com',\n\n  title: {\n    selectors: ['div[data-test-id=\"post-content\"] h2'],\n  },\n\n  author: {\n    selectors: ['div[data-test-id=\"post-content\"] a[href*=\"user/\"]'],\n  },\n\n  date_published: {\n    selectors: [\n      'div[data-test-id=\"post-content\"] a[data-click-id=\"timestamp\"]',\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['div[data-test-id=\"post-content\"] p'], // text post\n      [\n        'div[data-test-id=\"post-content\"] a[target=\"_blank\"]:not([data-click-id=\"timestamp\"])', // external link\n        'div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]', // embedded media\n      ], // external link with media preview (YouTube, imgur album, etc...)\n      ['div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]'], // Embedded media (Reddit video)\n      [\n        'div[data-test-id=\"post-content\"] a[target=\"_blank\"]:not([data-click-id=\"timestamp\"])',\n      ], // external link\n      'div[data-test-id=\"post-content\"]',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div[role=\"img\"]': $node => {\n        // External link image preview\n        const $img = $node.find('img');\n        const bgImg = $node.css('background-image');\n        if ($img.length === 1 && bgImg) {\n          $img.attr('src', bgImg.match(/\\((.*?)\\)/)[1].replace(/('|\")/g, ''));\n          return $img;\n        }\n        return $node;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.icon'],\n  },\n};\n","export const OtrsComExtractor = {\n  domain: 'otrs.com',\n\n  title: {\n    selectors: ['#main article h1'],\n  },\n\n  author: {\n    selectors: ['div.dateplusauthor a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main article'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [\n      'div.dateplusauthor',\n      'div.gr-12.push-6.footershare',\n      '#atftbx',\n      'div.category-modul',\n    ],\n  },\n};\n","export const WwwOssnewsJpExtractor = {\n  domain: 'www.ossnews.jp',\n\n  title: {\n    selectors: ['#alpha-block h1.hxnewstitle'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.fs12'],\n    format: 'YYYY年MM月DD日 HH:mm',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#alpha-block .section:has(h1.hxnewstitle)'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const BuzzapJpExtractor = {\n  domain: 'buzzap.jp',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['time.entry-date', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.ctiframe'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwAsahiComExtractor = {\n  domain: 'www.asahi.com',\n\n  title: {\n    selectors: ['.ArticleTitle h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"pubdate\"]', 'value']],\n  },\n\n  dek: null,\n\n  excerpt: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#MainInner div.ArticleBody'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['div.AdMod', 'div.LoginSelectArea'],\n  },\n};\n","export const WwwSanwaCoJpExtractor = {\n  domain: 'www.sanwa.co.jp',\n\n  title: {\n    selectors: ['#newsContent h1'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.date'],\n    format: 'YYYY.MM.DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#newsContent'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#smartphone', 'div.sns_box', 'div.contentFoot'],\n  },\n};\n","export const WwwElecomCoJpExtractor = {\n  domain: 'www.elecom.co.jp',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.section-last'],\n    format: 'YYYY.MM.DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['td.TableMain2'],\n\n    defaultCleaner: false,\n\n    transforms: {\n      table: $node => {\n        $node.attr('width', 'auto');\n      },\n    },\n\n    clean: [],\n  },\n};\n","export const ScanNetsecurityNeJpExtractor = {\n  domain: 'scan.netsecurity.ne.jp',\n\n  title: {\n    selectors: ['header.arti-header h1.head'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['header.arti-header p.arti-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.arti-content.arti-content--thumbnail'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['aside.arti-giga'],\n  },\n};\n","export const JvndbJvnJpExtractor = {\n  domain: 'jvndb.jvn.jp',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['div.modifytxt:nth-child(2)'],\n    format: 'YYYY/MM/DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['#news-list'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const GeniusComExtractor = {\n  domain: 'genius.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['h2 a'],\n  },\n\n  date_published: {\n    selectors: [\n      [\n        'meta[itemprop=page_data]',\n        'value',\n        res => {\n          const json = JSON.parse(res);\n          return json.song.release_date;\n        },\n      ],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      [\n        'meta[itemprop=page_data]',\n        'value',\n        res => {\n          const json = JSON.parse(res);\n          return json.song.album.cover_art_url;\n        },\n      ],\n    ],\n  },\n\n  content: {\n    selectors: ['.lyrics'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwJnsaOrgExtractor = {\n  domain: 'www.jnsa.org',\n\n  title: {\n    selectors: ['#wgtitle h2'],\n  },\n\n  author: null,\n\n  date_published: null,\n\n  dek: null,\n\n  excerpt: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main_area'],\n\n    transforms: {},\n\n    clean: ['#pankuzu', '#side'],\n  },\n};\n","export const PhpspotOrgExtractor = {\n  domain: 'phpspot.org',\n\n  title: {\n    selectors: ['h3.hl'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['h4.hl'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['div.entrybody'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwInfoqComExtractor = {\n  domain: 'www.infoq.com',\n\n  title: {\n    selectors: ['h1.heading'],\n  },\n\n  author: {\n    selectors: ['div.widget.article__authors'],\n  },\n\n  date_published: {\n    selectors: ['.article__readTime.date'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article__data'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwMoongiftJpExtractor = {\n  domain: 'www.moongift.jp',\n\n  title: {\n    selectors: ['h1.title a'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['ul.meta li:not(.social):first-of-type'],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main'],\n\n    transforms: {},\n\n    clean: ['ul.mg_service.cf'],\n  },\n};\n","export const WwwItmediaCoJpExtractor = {\n  domain: 'www.itmedia.co.jp',\n\n  supportedDomains: [\n    'www.atmarkit.co.jp',\n    'techtarget.itmedia.co.jp',\n    'nlab.itmedia.co.jp',\n  ],\n\n  title: {\n    selectors: ['#cmsTitle h1'],\n  },\n\n  author: {\n    selectors: ['#byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['#cmsAbstract h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#cmsBody'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#snsSharebox'],\n  },\n};\n","export const WwwPublickey1JpExtractor = {\n  domain: 'www.publickey1.jp',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['#subcol p:has(img)'],\n  },\n\n  date_published: {\n    selectors: ['div.pubdate'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#maincol'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#breadcrumbs', 'div.sbm', 'div.ad_footer'],\n  },\n};\n","export const TakagihiromitsuJpExtractor = {\n  domain: 'takagi-hiromitsu.jp',\n\n  title: {\n    selectors: ['h3'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[http-equiv=\"Last-Modified\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['div.body'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const BookwalkerJpExtractor = {\n  domain: 'bookwalker.jp',\n\n  title: {\n    selectors: ['h1.main-heading'],\n  },\n\n  author: {\n    selectors: ['div.authors'],\n  },\n\n  date_published: {\n    selectors: [\n      '.work-info .work-detail:first-of-type .work-detail-contents:last-of-type',\n    ],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['div.main-info', 'div.main-cover-inner']],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [\n      'span.label.label--trial',\n      'dt.info-head.info-head--coin',\n      'dd.info-contents.info-contents--coin',\n      'div.info-notice.fn-toggleClass',\n    ],\n  },\n};\n","export const WwwYomiuriCoJpExtractor = {\n  domain: 'www.yomiuri.co.jp',\n\n  title: {\n    selectors: ['h1.title-article.c-article-title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.p-main-contents'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const JapanCnetComExtractor = {\n  domain: 'japan.cnet.com',\n\n  title: {\n    selectors: ['.leaf-headline-ttl'],\n  },\n\n  author: {\n    selectors: ['.writer'],\n  },\n\n  date_published: {\n    selectors: ['.date'],\n    format: 'YYYY年MM月DD日 HH時mm分',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article_body'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const DeadlineComExtractor = {\n  domain: 'deadline.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['section.author h3'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.a-article-grid__main.pmc-a-grid article.pmc-a-grid-item'],\n\n    transforms: {\n      '.embed-twitter': $node => {\n        const innerHtml = $node.html();\n        $node.replaceWith(innerHtml);\n      },\n    },\n\n    clean: [],\n  },\n};\n","export const WwwGizmodoJpExtractor = {\n  domain: 'www.gizmodo.jp',\n\n  title: {\n    selectors: ['h1.p-post-title'],\n  },\n\n  author: {\n    selectors: ['li.p-post-AssistAuthor'],\n  },\n\n  date_published: {\n    selectors: [['li.p-post-AssistTime time', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article.p-post'],\n\n    transforms: {\n      'img.p-post-thumbnailImage': $node => {\n        const src = $node.attr('src');\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\n      },\n    },\n\n    clean: ['h1.p-post-title', 'ul.p-post-Assist'],\n  },\n};\n","export const GetnewsJpExtractor = {\n  domain: 'getnews.jp',\n\n  title: {\n    selectors: ['article h1'],\n  },\n\n  author: {\n    selectors: ['span.prof'],\n  },\n\n  date_published: {\n    selectors: [['ul.cattag-top time', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.post-bodycopy'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwLifehackerJpExtractor = {\n  domain: 'www.lifehacker.jp',\n\n  title: {\n    selectors: ['h1.lh-summary-title'],\n  },\n\n  author: {\n    selectors: ['p.lh-entryDetailInner--credit'],\n  },\n\n  date_published: {\n    selectors: [['div.lh-entryDetail-header time', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.lh-entryDetail-body'],\n\n    transforms: {\n      'img.lazyload': $node => {\n        const src = $node.attr('src');\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\n      },\n    },\n\n    clean: ['p.lh-entryDetailInner--credit'],\n  },\n};\n","export const SectIijAdJpExtractor = {\n  domain: 'sect.iij.ad.jp',\n\n  title: {\n    selectors: ['h3'],\n  },\n\n  author: {\n    selectors: ['dl.entrydate dd'],\n  },\n\n  date_published: {\n    selectors: ['dl.entrydate dd'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#article'],\n\n    transforms: {},\n\n    clean: ['dl.entrydate'],\n  },\n};\n","export const WwwOreillyCoJpExtractor = {\n  domain: 'www.oreilly.co.jp',\n\n  title: {\n    selectors: ['h3'],\n  },\n\n  author: {\n    selectors: ['li[itemprop=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#content'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['.social-tools'],\n  },\n};\n","export const WwwIpaGoJpExtractor = {\n  domain: 'www.ipa.go.jp',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.ipar_text_right'],\n    format: 'YYYY年M月D日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['#ipar_main'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['p.ipar_text_right'],\n  },\n};\n","export const WeeklyAsciiJpExtractor = {\n  domain: 'weekly.ascii.jp',\n\n  title: {\n    selectors: ['h1[itemprop=\"headline\"]'],\n  },\n\n  author: {\n    selectors: ['p.author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"odate\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const TechlogIijAdJpExtractor = {\n  domain: 'techlog.iij.ad.jp',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['a[rel=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [['time.entry-date', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry-content'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","import URL from 'url';\n\nexport const WiredJpExtractor = {\n  domain: 'wired.jp',\n\n  title: {\n    selectors: ['h1.post-title'],\n  },\n\n  author: {\n    selectors: ['p[itemprop=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [['time', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['.post-intro'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article.article-detail'],\n\n    transforms: {\n      'img[data-original]': $node => {\n        const dataOriginal = $node.attr('data-original');\n        const src = $node.attr('src');\n        const url = URL.resolve(src, dataOriginal);\n        $node.attr('src', url);\n      },\n    },\n\n    clean: ['.post-category', 'time', 'h1.post-title', '.social-area-syncer'],\n  },\n};\n","export const JapanZdnetComExtractor = {\n  domain: 'japan.zdnet.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"cXenseParse:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article_body'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwRbbtodayComExtractor = {\n  domain: 'www.rbbtoday.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.writer.writer-name'],\n  },\n\n  date_published: {\n    selectors: [['header time', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['.arti-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.arti-content'],\n\n    transforms: {},\n\n    clean: ['.arti-giga'],\n  },\n};\n","export const WwwLemondeFrExtractor = {\n  domain: 'www.lemonde.fr',\n\n  title: {\n    selectors: ['h1.article__title'],\n  },\n\n  author: {\n    selectors: ['.author__name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.article__desc'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article__content'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwPhoronixComExtractor = {\n  domain: 'www.phoronix.com',\n\n  title: {\n    selectors: ['article header'],\n  },\n\n  author: {\n    selectors: ['.author a:first-child'],\n  },\n\n  date_published: {\n    selectors: ['.author'],\n    // 1 June 2019 at 08:34 PM EDT\n    format: 'D MMMM YYYY at hh:mm',\n    timezone: 'America/New_York',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const PitchforkComExtractor = {\n  domain: 'pitchfork.com',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: {\n    selectors: ['.authors-detail__display-name'],\n  },\n\n  date_published: {\n    selectors: [['.pub-date', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['.review-detail__abstract'],\n  },\n\n  lead_image_url: {\n    selectors: [['.single-album-tombstone__art img', 'src']],\n  },\n\n  content: {\n    selectors: ['.review-detail__text'],\n  },\n\n  extend: {\n    score: {\n      selectors: ['.score'],\n    },\n  },\n};\n","export const BiorxivOrgExtractor = {\n  domain: 'biorxiv.org',\n\n  title: {\n    selectors: ['h1#page-title'],\n  },\n\n  author: {\n    selectors: [\n      'div.highwire-citation-biorxiv-article-top > div.highwire-cite-authors',\n    ],\n  },\n\n  content: {\n    selectors: ['div#abstract-1'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const EpaperZeitDeExtractor = {\n  domain: 'epaper.zeit.de',\n\n  title: {\n    selectors: ['p.title'],\n  },\n\n  author: {\n    selectors: ['.article__author'],\n  },\n\n  date_published: null,\n\n  excerpt: {\n    selectors: ['subtitle'],\n  },\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'p.title': 'h1',\n      '.article__author': 'p',\n      byline: 'p',\n      linkbox: 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['image-credits', 'box[type=citation]'],\n  },\n};\n","import mergeSupportedDomains from 'utils/merge-supported-domains';\nimport * as CustomExtractors from './custom/index';\n\nexport default Object.keys(CustomExtractors).reduce((acc, key) => {\n  const extractor = CustomExtractors[key];\n  return {\n    ...acc,\n    ...mergeSupportedDomains(extractor),\n  };\n}, {});\n","// CLEAN AUTHOR CONSTANTS\nexport const CLEAN_AUTHOR_RE = /^\\s*(posted |written )?by\\s*:?\\s*(.*)/i;\n\n// CLEAN DEK CONSTANTS\nexport const TEXT_LINK_RE = new RegExp('http(s)?://', 'i');\n// An ordered list of meta tag names that denote likely article deks.\n// From most distinct to least distinct.\n//\n// NOTE: There are currently no meta tags that seem to provide the right\n// content consistenty enough. Two options were:\n//  - og:description\n//  - dc.description\n// However, these tags often have SEO-specific junk in them that's not\n// header-worthy like a dek is. Excerpt material at best.\nexport const DEK_META_TAGS = [];\n\n// An ordered list of Selectors to find likely article deks. From\n// most explicit to least explicit.\n//\n// Should be more restrictive than not, as a failed dek can be pretty\n// detrimental to the aesthetics of an article.\nexport const DEK_SELECTORS = ['.entry-summary'];\n\n// CLEAN DATE PUBLISHED CONSTANTS\nexport const MS_DATE_STRING = /^\\d{13}$/i;\nexport const SEC_DATE_STRING = /^\\d{10}$/i;\nexport const CLEAN_DATE_STRING_RE = /^\\s*published\\s*:?\\s*(.*)/i;\nexport const TIME_MERIDIAN_SPACE_RE = /(.*\\d)(am|pm)(.*)/i;\nexport const TIME_MERIDIAN_DOTS_RE = /\\.m\\./i;\nexport const TIME_NOW_STRING = /^\\s*(just|right)?\\s*now\\s*/i;\nconst timeUnits = [\n  'seconds?',\n  'minutes?',\n  'hours?',\n  'days?',\n  'weeks?',\n  'months?',\n  'years?',\n];\nconst allTimeUnits = timeUnits.join('|');\nexport const TIME_AGO_STRING = new RegExp(\n  `(\\\\d+)\\\\s+(${allTimeUnits})\\\\s+ago`,\n  'i'\n);\nconst months = [\n  'jan',\n  'feb',\n  'mar',\n  'apr',\n  'may',\n  'jun',\n  'jul',\n  'aug',\n  'sep',\n  'oct',\n  'nov',\n  'dec',\n];\nconst allMonths = months.join('|');\nconst timestamp1 = '[0-9]{1,2}:[0-9]{2,2}( ?[ap].?m.?)?';\nconst timestamp2 = '[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2,4}';\nconst timestamp3 = '-[0-9]{3,4}$';\nexport const SPLIT_DATE_STRING = new RegExp(\n  `(${timestamp1})|(${timestamp2})|(${timestamp3})|([0-9]{1,4})|(${allMonths})`,\n  'ig'\n);\n\n// 2016-11-22T08:57-500\n// Check if datetime string has an offset at the end\nexport const TIME_WITH_OFFSET_RE = /-\\d{3,4}$/;\n\n// CLEAN TITLE CONSTANTS\n// A regular expression that will match separating characters on a\n// title, that usually denote breadcrumbs or something similar.\nexport const TITLE_SPLITTERS_RE = /(: | - | \\| )/g;\n\nexport const DOMAIN_ENDINGS_RE = new RegExp('.com$|.net$|.org$|.co.uk$', 'g');\n","import { normalizeSpaces } from 'utils/text';\nimport { CLEAN_AUTHOR_RE } from './constants';\n\n// Take an author string (like 'By David Smith ') and clean it to\n// just the name(s): 'David Smith'.\nexport default function cleanAuthor(author) {\n  return normalizeSpaces(author.replace(CLEAN_AUTHOR_RE, '$2').trim());\n}\n","import validUrl from 'valid-url';\n\nexport default function clean(leadImageUrl) {\n  leadImageUrl = leadImageUrl.trim();\n  if (validUrl.isWebUri(leadImageUrl)) {\n    return leadImageUrl;\n  }\n\n  return null;\n}\n","import { stripTags } from 'utils/dom';\nimport { excerptContent, normalizeSpaces } from 'utils/text';\n\nimport { TEXT_LINK_RE } from './constants';\n\n// Take a dek HTML fragment, and return the cleaned version of it.\n// Return None if the dek wasn't good enough.\nexport default function cleanDek(dek, { $, excerpt }) {\n  // Sanity check that we didn't get too short or long of a dek.\n  if (dek.length > 1000 || dek.length < 5) return null;\n\n  // Check that dek isn't the same as excerpt\n  if (excerpt && excerptContent(excerpt, 10) === excerptContent(dek, 10))\n    return null;\n\n  const dekText = stripTags(dek, $);\n\n  // Plain text links shouldn't exist in the dek. If we have some, it's\n  // not a good dek - bail.\n  if (TEXT_LINK_RE.test(dekText)) return null;\n\n  return normalizeSpaces(dekText.trim());\n}\n","import moment from 'moment-timezone';\nimport parseFormat from 'moment-parseformat';\n// Is there a compelling reason to use moment here?\n// Mostly only being used for the isValid() method,\n// but could just check for 'Invalid Date' string.\n\nimport {\n  MS_DATE_STRING,\n  SEC_DATE_STRING,\n  CLEAN_DATE_STRING_RE,\n  SPLIT_DATE_STRING,\n  TIME_AGO_STRING,\n  TIME_NOW_STRING,\n  TIME_MERIDIAN_SPACE_RE,\n  TIME_MERIDIAN_DOTS_RE,\n  TIME_WITH_OFFSET_RE,\n} from './constants';\n\nexport function cleanDateString(dateString) {\n  return (dateString.match(SPLIT_DATE_STRING) || [])\n    .join(' ')\n    .replace(TIME_MERIDIAN_DOTS_RE, 'm')\n    .replace(TIME_MERIDIAN_SPACE_RE, '$1 $2 $3')\n    .replace(CLEAN_DATE_STRING_RE, '$1')\n    .trim();\n}\n\nexport function createDate(dateString, timezone, format) {\n  if (TIME_WITH_OFFSET_RE.test(dateString)) {\n    return moment(new Date(dateString));\n  }\n\n  if (TIME_AGO_STRING.test(dateString)) {\n    const fragments = TIME_AGO_STRING.exec(dateString);\n    return moment().subtract(fragments[1], fragments[2]);\n  }\n\n  if (TIME_NOW_STRING.test(dateString)) {\n    return moment();\n  }\n\n  return timezone\n    ? moment.tz(dateString, format || parseFormat(dateString), timezone)\n    : moment(dateString, format || parseFormat(dateString));\n}\n\n// Take a date published string, and hopefully return a date out of\n// it. Return none if we fail.\nexport default function cleanDatePublished(\n  dateString,\n  { timezone, format } = {}\n) {\n  // If string is in milliseconds or seconds, convert to int and return\n  if (MS_DATE_STRING.test(dateString) || SEC_DATE_STRING.test(dateString)) {\n    return new Date(parseInt(dateString, 10)).toISOString();\n  }\n\n  let date = createDate(dateString, timezone, format);\n\n  if (!date.isValid()) {\n    dateString = cleanDateString(dateString);\n    date = createDate(dateString, timezone, format);\n  }\n\n  return date.isValid() ? date.toISOString() : null;\n}\n","import {\n  cleanAttributes,\n  cleanHeaders,\n  cleanHOnes,\n  cleanImages,\n  cleanTags,\n  removeEmpty,\n  rewriteTopLevel,\n  markToKeep,\n  stripJunkTags,\n  makeLinksAbsolute,\n} from 'utils/dom';\n\n// Clean our article content, returning a new, cleaned node.\nexport default function extractCleanNode(\n  article,\n  { $, cleanConditionally = true, title = '', url = '', defaultCleaner = true }\n) {\n  // Rewrite the tag name to div if it's a top level node like body or\n  // html to avoid later complications with multiple body tags.\n  rewriteTopLevel(article, $);\n\n  // Drop small images and spacer images\n  // Only do this is defaultCleaner is set to true;\n  // this can sometimes be too aggressive.\n  if (defaultCleaner) cleanImages(article, $);\n\n  // Make links absolute\n  makeLinksAbsolute(article, $, url);\n\n  // Mark elements to keep that would normally be removed.\n  // E.g., stripJunkTags will remove iframes, so we're going to mark\n  // YouTube/Vimeo videos as elements we want to keep.\n  markToKeep(article, $, url);\n\n  // Drop certain tags like <title>, etc\n  // This is -mostly- for cleanliness, not security.\n  stripJunkTags(article, $);\n\n  // H1 tags are typically the article title, which should be extracted\n  // by the title extractor instead. If there's less than 3 of them (<3),\n  // strip them. Otherwise, turn 'em into H2s.\n  cleanHOnes(article, $);\n\n  // Clean headers\n  cleanHeaders(article, $, title);\n\n  // We used to clean UL's and OL's here, but it was leading to\n  // too many in-article lists being removed. Consider a better\n  // way to detect menus particularly and remove them.\n  // Also optionally running, since it can be overly aggressive.\n  if (defaultCleaner) cleanTags(article, $, cleanConditionally);\n\n  // Remove empty paragraph nodes\n  removeEmpty(article, $);\n\n  // Remove unnecessary attributes\n  cleanAttributes(article, $);\n\n  return article;\n}\n","import { stripTags } from 'utils/dom';\nimport { normalizeSpaces } from 'utils/text';\n\nimport { TITLE_SPLITTERS_RE } from './constants';\nimport { resolveSplitTitle } from './index';\n\nexport default function cleanTitle(title, { url, $ }) {\n  // If title has |, :, or - in it, see if\n  // we can clean it up.\n  if (TITLE_SPLITTERS_RE.test(title)) {\n    title = resolveSplitTitle(title, url);\n  }\n\n  // Final sanity check that we didn't get a crazy title.\n  // if (title.length > 150 || title.length < 15) {\n  if (title.length > 150) {\n    // If we did, return h1 from the document if it exists\n    const h1 = $('h1');\n    if (h1.length === 1) {\n      title = h1.text();\n    }\n  }\n\n  // strip any html tags in the title text\n  return normalizeSpaces(stripTags(title, $).trim());\n}\n","import URL from 'url';\nimport wuzzy from 'wuzzy';\n\nimport { TITLE_SPLITTERS_RE, DOMAIN_ENDINGS_RE } from './constants';\n\nfunction extractBreadcrumbTitle(splitTitle, text) {\n  // This must be a very breadcrumbed title, like:\n  // The Best Gadgets on Earth : Bits : Blogs : NYTimes.com\n  // NYTimes - Blogs - Bits - The Best Gadgets on Earth\n  if (splitTitle.length >= 6) {\n    // Look to see if we can find a breadcrumb splitter that happens\n    // more than once. If we can, we'll be able to better pull out\n    // the title.\n    const termCounts = splitTitle.reduce((acc, titleText) => {\n      acc[titleText] = acc[titleText] ? acc[titleText] + 1 : 1;\n      return acc;\n    }, {});\n\n    const [maxTerm, termCount] = Reflect.ownKeys(termCounts).reduce(\n      (acc, key) => {\n        if (acc[1] < termCounts[key]) {\n          return [key, termCounts[key]];\n        }\n\n        return acc;\n      },\n      [0, 0]\n    );\n\n    // We found a splitter that was used more than once, so it\n    // is probably the breadcrumber. Split our title on that instead.\n    // Note: max_term should be <= 4 characters, so that \" >> \"\n    // will match, but nothing longer than that.\n    if (termCount >= 2 && maxTerm.length <= 4) {\n      splitTitle = text.split(maxTerm);\n    }\n\n    const splitEnds = [splitTitle[0], splitTitle.slice(-1)];\n    const longestEnd = splitEnds.reduce(\n      (acc, end) => (acc.length > end.length ? acc : end),\n      ''\n    );\n\n    if (longestEnd.length > 10) {\n      return longestEnd;\n    }\n\n    return text;\n  }\n\n  return null;\n}\n\nfunction cleanDomainFromTitle(splitTitle, url) {\n  // Search the ends of the title, looking for bits that fuzzy match\n  // the URL too closely. If one is found, discard it and return the\n  // rest.\n  //\n  // Strip out the big TLDs - it just makes the matching a bit more\n  // accurate. Not the end of the world if it doesn't strip right.\n  const { host } = URL.parse(url);\n  const nakedDomain = host.replace(DOMAIN_ENDINGS_RE, '');\n\n  const startSlug = splitTitle[0].toLowerCase().replace(' ', '');\n  const startSlugRatio = wuzzy.levenshtein(startSlug, nakedDomain);\n\n  if (startSlugRatio > 0.4 && startSlug.length > 5) {\n    return splitTitle.slice(2).join('');\n  }\n\n  const endSlug = splitTitle\n    .slice(-1)[0]\n    .toLowerCase()\n    .replace(' ', '');\n  const endSlugRatio = wuzzy.levenshtein(endSlug, nakedDomain);\n\n  if (endSlugRatio > 0.4 && endSlug.length >= 5) {\n    return splitTitle.slice(0, -2).join('');\n  }\n\n  return null;\n}\n\n// Given a title with separators in it (colons, dashes, etc),\n// resolve whether any of the segments should be removed.\nexport default function resolveSplitTitle(title, url = '') {\n  // Splits while preserving splitters, like:\n  // ['The New New York', ' - ', 'The Washington Post']\n  const splitTitle = title.split(TITLE_SPLITTERS_RE);\n  if (splitTitle.length === 1) {\n    return title;\n  }\n\n  let newTitle = extractBreadcrumbTitle(splitTitle, title);\n  if (newTitle) return newTitle;\n\n  newTitle = cleanDomainFromTitle(splitTitle, url);\n  if (newTitle) return newTitle;\n\n  // Fuzzy ratio didn't find anything, so this title is probably legit.\n  // Just return it all.\n  return title;\n}\n","import cleanAuthor from './author';\nimport cleanImage from './lead-image-url';\nimport cleanDek from './dek';\nimport cleanDatePublished from './date-published';\nimport cleanContent from './content';\nimport cleanTitle from './title';\n\nconst Cleaners = {\n  author: cleanAuthor,\n  lead_image_url: cleanImage,\n  dek: cleanDek,\n  date_published: cleanDatePublished,\n  content: cleanContent,\n  title: cleanTitle,\n};\n\nexport default Cleaners;\n\nexport { cleanAuthor };\nexport { cleanImage };\nexport { cleanDek };\nexport { cleanDatePublished };\nexport { cleanContent };\nexport { cleanTitle };\nexport { default as resolveSplitTitle } from './resolve-split-title';\n","import { stripUnlikelyCandidates, convertToParagraphs } from 'utils/dom';\n\nimport { scoreContent, findTopCandidate } from './scoring';\n\n// Using a variety of scoring techniques, extract the content most\n// likely to be article text.\n//\n// If strip_unlikely_candidates is True, remove any elements that\n// match certain criteria first. (Like, does this element have a\n// classname of \"comment\")\n//\n// If weight_nodes is True, use classNames and IDs to determine the\n// worthiness of nodes.\n//\n// Returns a cheerio object $\nexport default function extractBestNode($, opts) {\n  if (opts.stripUnlikelyCandidates) {\n    $ = stripUnlikelyCandidates($);\n  }\n\n  $ = convertToParagraphs($);\n  $ = scoreContent($, opts.weightNodes);\n  const $topCandidate = findTopCandidate($);\n\n  return $topCandidate;\n}\n","import cheerio from 'cheerio';\n\nimport { nodeIsSufficient } from 'utils/dom';\nimport { cleanContent } from 'cleaners';\nimport { normalizeSpaces } from 'utils/text';\n\nimport extractBestNode from './extract-best-node';\n\nconst GenericContentExtractor = {\n  defaultOpts: {\n    stripUnlikelyCandidates: true,\n    weightNodes: true,\n    cleanConditionally: true,\n  },\n\n  // Extract the content for this resource - initially, pass in our\n  // most restrictive opts which will return the highest quality\n  // content. On each failure, retry with slightly more lax opts.\n  //\n  // :param return_type: string. If \"node\", should return the content\n  // as a cheerio node rather than as an HTML string.\n  //\n  // Opts:\n  // stripUnlikelyCandidates: Remove any elements that match\n  // non-article-like criteria first.(Like, does this element\n  //   have a classname of \"comment\")\n  //\n  // weightNodes: Modify an elements score based on whether it has\n  // certain classNames or IDs. Examples: Subtract if a node has\n  // a className of 'comment', Add if a node has an ID of\n  // 'entry-content'.\n  //\n  // cleanConditionally: Clean the node to return of some\n  // superfluous content. Things like forms, ads, etc.\n  extract({ $, html, title, url }, opts) {\n    opts = { ...this.defaultOpts, ...opts };\n\n    $ = $ || cheerio.load(html);\n\n    // Cascade through our extraction-specific opts in an ordered fashion,\n    // turning them off as we try to extract content.\n    let node = this.getContentNode($, title, url, opts);\n\n    if (nodeIsSufficient(node)) {\n      return this.cleanAndReturnNode(node, $);\n    }\n\n    // We didn't succeed on first pass, one by one disable our\n    // extraction opts and try again.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Reflect.ownKeys(opts).filter(k => opts[k] === true)) {\n      opts[key] = false;\n      $ = cheerio.load(html);\n\n      node = this.getContentNode($, title, url, opts);\n\n      if (nodeIsSufficient(node)) {\n        break;\n      }\n    }\n\n    return this.cleanAndReturnNode(node, $);\n  },\n\n  // Get node given current options\n  getContentNode($, title, url, opts) {\n    return cleanContent(extractBestNode($, opts), {\n      $,\n      cleanConditionally: opts.cleanConditionally,\n      title,\n      url,\n    });\n  },\n\n  // Once we got here, either we're at our last-resort node, or\n  // we broke early. Make sure we at least have -something- before we\n  // move forward.\n  cleanAndReturnNode(node, $) {\n    if (!node) {\n      return null;\n    }\n\n    return normalizeSpaces($.html(node));\n  },\n};\n\nexport default GenericContentExtractor;\n","// TODO: It would be great if we could merge the meta and selector lists into\n// a list of objects, because we could then rank them better. For example,\n// .hentry .entry-title is far better suited than <meta title>.\n\n// An ordered list of meta tag names that denote likely article titles. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\nexport const STRONG_TITLE_META_TAGS = [\n  'tweetmeme-title',\n  'dc.title',\n  'rbtitle',\n  'headline',\n  'title',\n];\n\n// og:title is weak because it typically contains context that we don't like,\n// for example the source site's name. Gotta get that brand into facebook!\nexport const WEAK_TITLE_META_TAGS = ['og:title'];\n\n// An ordered list of XPath Selectors to find likely article titles. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nexport const STRONG_TITLE_SELECTORS = [\n  '.hentry .entry-title',\n  'h1#articleHeader',\n  'h1.articleHeader',\n  'h1.article',\n  '.instapaper_title',\n  '#meebo-title',\n];\n\nexport const WEAK_TITLE_SELECTORS = [\n  'article h1',\n  '#entry-title',\n  '.entry-title',\n  '#entryTitle',\n  '#entrytitle',\n  '.entryTitle',\n  '.entrytitle',\n  '#articleTitle',\n  '.articleTitle',\n  'post post-title',\n  'h1.title',\n  'h2.article',\n  'h1',\n  'html head title',\n  'title',\n];\n","import { cleanTitle } from 'cleaners';\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\n\nimport {\n  STRONG_TITLE_META_TAGS,\n  WEAK_TITLE_META_TAGS,\n  STRONG_TITLE_SELECTORS,\n  WEAK_TITLE_SELECTORS,\n} from './constants';\n\nconst GenericTitleExtractor = {\n  extract({ $, url, metaCache }) {\n    // First, check to see if we have a matching meta tag that we can make\n    // use of that is strongly associated with the headline.\n    let title;\n\n    title = extractFromMeta($, STRONG_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Second, look through our content selectors for the most likely\n    // article title that is strongly associated with the headline.\n    title = extractFromSelectors($, STRONG_TITLE_SELECTORS);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Third, check for weaker meta tags that may match.\n    title = extractFromMeta($, WEAK_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Last, look for weaker selector tags that may match.\n    title = extractFromSelectors($, WEAK_TITLE_SELECTORS);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // If no matches, return an empty string\n    return '';\n  },\n};\n\nexport default GenericTitleExtractor;\n","// An ordered list of meta tag names that denote likely article authors. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\n//\n// Note: \"author\" is too often the -developer- of the page, so it is not\n// added here.\nexport const AUTHOR_META_TAGS = [\n  'byl',\n  'clmst',\n  'dc.author',\n  'dcsext.author',\n  'dc.creator',\n  'rbauthors',\n  'authors',\n];\n\nexport const AUTHOR_MAX_LENGTH = 300;\n\n// An ordered list of XPath Selectors to find likely article authors. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nexport const AUTHOR_SELECTORS = [\n  '.entry .entry-author',\n  '.author.vcard .fn',\n  '.author .vcard .fn',\n  '.byline.vcard .fn',\n  '.byline .vcard .fn',\n  '.byline .by .author',\n  '.byline .by',\n  '.byline .author',\n  '.post-author.vcard',\n  '.post-author .vcard',\n  'a[rel=author]',\n  '#by_author',\n  '.by_author',\n  '#entryAuthor',\n  '.entryAuthor',\n  '.byline a[href*=author]',\n  '#author .authorname',\n  '.author .authorname',\n  '#author',\n  '.author',\n  '.articleauthor',\n  '.ArticleAuthor',\n  '.byline',\n];\n\n// An ordered list of Selectors to find likely article authors, with\n// regular expression for content.\nconst bylineRe = /^[\\n\\s]*By/i;\nexport const BYLINE_SELECTORS_RE = [\n  ['#byline', bylineRe],\n  ['.byline', bylineRe],\n];\n","import { cleanAuthor } from 'cleaners';\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\n\nimport {\n  AUTHOR_META_TAGS,\n  AUTHOR_MAX_LENGTH,\n  AUTHOR_SELECTORS,\n  BYLINE_SELECTORS_RE,\n} from './constants';\n\nconst GenericAuthorExtractor = {\n  extract({ $, metaCache }) {\n    let author;\n\n    // First, check to see if we have a matching\n    // meta tag that we can make use of.\n    author = extractFromMeta($, AUTHOR_META_TAGS, metaCache);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Second, look through our selectors looking for potential authors.\n    author = extractFromSelectors($, AUTHOR_SELECTORS, 2);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Last, use our looser regular-expression based selectors for\n    // potential authors.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [selector, regex] of BYLINE_SELECTORS_RE) {\n      const node = $(selector);\n      if (node.length === 1) {\n        const text = node.text();\n        if (regex.test(text)) {\n          return cleanAuthor(text);\n        }\n      }\n    }\n\n    return null;\n  },\n};\n\nexport default GenericAuthorExtractor;\n","// An ordered list of meta tag names that denote\n// likely date published dates. All attributes\n// should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nexport const DATE_PUBLISHED_META_TAGS = [\n  'article:published_time',\n  'displaydate',\n  'dc.date',\n  'dc.date.issued',\n  'rbpubdate',\n  'publish_date',\n  'pub_date',\n  'pagedate',\n  'pubdate',\n  'revision_date',\n  'doc_date',\n  'date_created',\n  'content_create_date',\n  'lastmodified',\n  'created',\n  'date',\n];\n\n// An ordered list of XPath Selectors to find\n// likely date published dates. From most explicit\n// to least explicit.\nexport const DATE_PUBLISHED_SELECTORS = [\n  '.hentry .dtstamp.published',\n  '.hentry .published',\n  '.hentry .dtstamp.updated',\n  '.hentry .updated',\n  '.single .published',\n  '.meta .published',\n  '.meta .postDate',\n  '.entry-date',\n  '.byline .date',\n  '.postmetadata .date',\n  '.article_datetime',\n  '.date-header',\n  '.story-date',\n  '.dateStamp',\n  '#story .datetime',\n  '.dateline',\n  '.pubdate',\n];\n\n// An ordered list of compiled regular expressions to find likely date\n// published dates from the URL. These should always have the first\n// reference be a date string that is parseable by dateutil.parser.parse\nconst abbrevMonthsStr = '(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)';\nexport const DATE_PUBLISHED_URL_RES = [\n  new RegExp('/(20\\\\d{2}/\\\\d{2}/\\\\d{2})/', 'i'),\n  new RegExp('(20\\\\d{2}-[01]\\\\d-[0-3]\\\\d)', 'i'),\n  new RegExp(`/(20\\\\d{2}/${abbrevMonthsStr}/[0-3]\\\\d)/`, 'i'),\n];\n","import { cleanDatePublished } from 'cleaners';\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\nimport { extractFromUrl } from 'utils/text';\n\nimport {\n  DATE_PUBLISHED_META_TAGS,\n  DATE_PUBLISHED_SELECTORS,\n  DATE_PUBLISHED_URL_RES,\n} from './constants';\n\nconst GenericDatePublishedExtractor = {\n  extract({ $, url, metaCache }) {\n    let datePublished;\n    // First, check to see if we have a matching meta tag\n    // that we can make use of.\n    // Don't try cleaning tags from this string\n    datePublished = extractFromMeta(\n      $,\n      DATE_PUBLISHED_META_TAGS,\n      metaCache,\n      false\n    );\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Second, look through our selectors looking for potential\n    // date_published's.\n    datePublished = extractFromSelectors($, DATE_PUBLISHED_SELECTORS);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Lastly, look to see if a dately string exists in the URL\n    datePublished = extractFromUrl(url, DATE_PUBLISHED_URL_RES);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    return null;\n  },\n};\n\nexport default GenericDatePublishedExtractor;\n","// Currently there is only one selector for\n// deks. We should simply return null here\n// until we have a more robust generic option.\n// Below is the original source for this, for reference.\nconst GenericDekExtractor = {\n  extract() {\n    return null;\n  },\n};\n\nexport default GenericDekExtractor;\n","// An ordered list of meta tag names that denote likely article leading images.\n// All attributes should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nexport const LEAD_IMAGE_URL_META_TAGS = [\n  'og:image',\n  'twitter:image',\n  'image_src',\n];\n\nexport const LEAD_IMAGE_URL_SELECTORS = ['link[rel=image_src]'];\n\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS = [\n  'upload',\n  'wp-content',\n  'large',\n  'photo',\n  'wp-image',\n];\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\n  POSITIVE_LEAD_IMAGE_URL_HINTS.join('|'),\n  'i'\n);\n\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS = [\n  'spacer',\n  'sprite',\n  'blank',\n  'throbber',\n  'gradient',\n  'tile',\n  'bg',\n  'background',\n  'icon',\n  'social',\n  'header',\n  'hdr',\n  'advert',\n  'spinner',\n  'loader',\n  'loading',\n  'default',\n  'rating',\n  'share',\n  'facebook',\n  'twitter',\n  'theme',\n  'promo',\n  'ads',\n  'wp-includes',\n];\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\n  NEGATIVE_LEAD_IMAGE_URL_HINTS.join('|'),\n  'i'\n);\n\nexport const GIF_RE = /\\.gif(\\?.*)?$/i;\nexport const JPG_RE = /\\.jpe?g(\\?.*)?$/i;\n","import {\n  POSITIVE_LEAD_IMAGE_URL_HINTS_RE,\n  NEGATIVE_LEAD_IMAGE_URL_HINTS_RE,\n  GIF_RE,\n  JPG_RE,\n} from './constants';\n\nimport { PHOTO_HINTS_RE } from '../content/scoring/constants';\n\nfunction getSig($node) {\n  return `${$node.attr('class') || ''} ${$node.attr('id') || ''}`;\n}\n\n// Scores image urls based on a variety of heuristics.\nexport function scoreImageUrl(url) {\n  url = url.trim();\n  let score = 0;\n\n  if (POSITIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score += 20;\n  }\n\n  if (NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score -= 20;\n  }\n\n  // TODO: We might want to consider removing this as\n  // gifs are much more common/popular than they once were\n  if (GIF_RE.test(url)) {\n    score -= 10;\n  }\n\n  if (JPG_RE.test(url)) {\n    score += 10;\n  }\n\n  // PNGs are neutral.\n\n  return score;\n}\n\n// Alt attribute usually means non-presentational image.\nexport function scoreAttr($img) {\n  if ($img.attr('alt')) {\n    return 5;\n  }\n\n  return 0;\n}\n\n// Look through our parent and grandparent for figure-like\n// container elements, give a bonus if we find them\nexport function scoreByParents($img) {\n  let score = 0;\n  const $figParent = $img.parents('figure').first();\n\n  if ($figParent.length === 1) {\n    score += 25;\n  }\n\n  const $parent = $img.parent();\n  let $gParent;\n  if ($parent.length === 1) {\n    $gParent = $parent.parent();\n  }\n\n  [$parent, $gParent].forEach($node => {\n    if (PHOTO_HINTS_RE.test(getSig($node))) {\n      score += 15;\n    }\n  });\n\n  return score;\n}\n\n// Look at our immediate sibling and see if it looks like it's a\n// caption. Bonus if so.\nexport function scoreBySibling($img) {\n  let score = 0;\n  const $sibling = $img.next();\n  const sibling = $sibling.get(0);\n\n  if (sibling && sibling.tagName.toLowerCase() === 'figcaption') {\n    score += 25;\n  }\n\n  if (PHOTO_HINTS_RE.test(getSig($sibling))) {\n    score += 15;\n  }\n\n  return score;\n}\n\nexport function scoreByDimensions($img) {\n  let score = 0;\n\n  const width = parseFloat($img.attr('width'));\n  const height = parseFloat($img.attr('height'));\n  const src = $img.attr('src');\n\n  // Penalty for skinny images\n  if (width && width <= 50) {\n    score -= 50;\n  }\n\n  // Penalty for short images\n  if (height && height <= 50) {\n    score -= 50;\n  }\n\n  if (width && height && !src.includes('sprite')) {\n    const area = width * height;\n    if (area < 5000) {\n      // Smaller than 50 x 100\n      score -= 100;\n    } else {\n      score += Math.round(area / 1000);\n    }\n  }\n\n  return score;\n}\n\nexport function scoreByPosition($imgs, index) {\n  return $imgs.length / 2 - index;\n}\n","import { extractFromMeta } from 'utils/dom';\nimport { cleanImage } from 'cleaners';\n\nimport {\n  LEAD_IMAGE_URL_META_TAGS,\n  LEAD_IMAGE_URL_SELECTORS,\n} from './constants';\n\nimport {\n  scoreImageUrl,\n  scoreAttr,\n  scoreByParents,\n  scoreBySibling,\n  scoreByDimensions,\n  scoreByPosition,\n} from './score-image';\n\n// Given a resource, try to find the lead image URL from within\n// it. Like content and next page extraction, uses a scoring system\n// to determine what the most likely image may be. Short circuits\n// on really probable things like og:image meta tags.\n//\n// Potential signals to still take advantage of:\n//   * domain\n//   * weird aspect ratio\nconst GenericLeadImageUrlExtractor = {\n  extract({ $, content, metaCache, html }) {\n    let cleanUrl;\n    if ($('head').length === 0) {\n      $('*').first().prepend(html);\n    }\n\n    // Check to see if we have a matching meta tag that we can make use of.\n    // Moving this higher because common practice is now to use large\n    // images on things like Open Graph or Twitter cards.\n    // images usually have for things like Open Graph.\n    const imageUrl = extractFromMeta(\n      $,\n      LEAD_IMAGE_URL_META_TAGS,\n      metaCache,\n      false\n    );\n\n    if (imageUrl) {\n      cleanUrl = cleanImage(imageUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // Next, try to find the \"best\" image via the content.\n    // We'd rather not have to fetch each image and check dimensions,\n    // so try to do some analysis and determine them instead.\n    const $content = $(content);\n    const imgs = $('img', $content).toArray();\n    const imgScores = {};\n\n    imgs.forEach((img, index) => {\n      const $img = $(img);\n      const src = $img.attr('src');\n\n      if (!src) return;\n\n      let score = scoreImageUrl(src);\n      score += scoreAttr($img);\n      score += scoreByParents($img);\n      score += scoreBySibling($img);\n      score += scoreByDimensions($img);\n      score += scoreByPosition(imgs, index);\n\n      imgScores[src] = score;\n    });\n\n    const [topUrl, topScore] = Reflect.ownKeys(imgScores).reduce(\n      (acc, key) => (imgScores[key] > acc[1] ? [key, imgScores[key]] : acc),\n      [null, 0]\n    );\n\n    if (topScore > 0) {\n      cleanUrl = cleanImage(topUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // If nothing else worked, check to see if there are any really\n    // probable nodes in the doc, like <link rel=\"image_src\" />.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const selector of LEAD_IMAGE_URL_SELECTORS) {\n      const $node = $(selector).first();\n      const src = $node.attr('src');\n      if (src) {\n        cleanUrl = cleanImage(src);\n        if (cleanUrl) return cleanUrl;\n      }\n\n      const href = $node.attr('href');\n      if (href) {\n        cleanUrl = cleanImage(href);\n        if (cleanUrl) return cleanUrl;\n      }\n\n      const value = $node.attr('value');\n      if (value) {\n        cleanUrl = cleanImage(value);\n        if (cleanUrl) return cleanUrl;\n      }\n    }\n\n    return null;\n  },\n};\n\nexport default GenericLeadImageUrlExtractor;\n","import difflib from 'difflib';\n\nexport default function scoreSimilarity(score, articleUrl, href) {\n  // Do this last and only if we have a real candidate, because it's\n  // potentially expensive computationally. Compare the link to this\n  // URL using difflib to get the % similarity of these URLs. On a\n  // sliding scale, subtract points from this link based on\n  // similarity.\n  if (score > 0) {\n    const similarity = new difflib.SequenceMatcher(\n      null,\n      articleUrl,\n      href\n    ).ratio();\n    // Subtract .1 from diff_percent when calculating modifier,\n    // which means that if it's less than 10% different, we give a\n    // bonus instead. Ex:\n    //  3% different = +17.5 points\n    // 10% different = 0 points\n    // 20% different = -25 points\n    const diffPercent = 1.0 - similarity;\n    const diffModifier = -(250 * (diffPercent - 0.2));\n    return score + diffModifier;\n  }\n\n  return 0;\n}\n","import { IS_DIGIT_RE } from 'utils/text/constants';\n\nexport default function scoreLinkText(linkText, pageNum) {\n  // If the link text can be parsed as a number, give it a minor\n  // bonus, with a slight bias towards lower numbered pages. This is\n  // so that pages that might not have 'next' in their text can still\n  // get scored, and sorted properly by score.\n  let score = 0;\n\n  if (IS_DIGIT_RE.test(linkText.trim())) {\n    const linkTextAsNum = parseInt(linkText, 10);\n    // If it's the first page, we already got it on the first call.\n    // Give it a negative score. Otherwise, up to page 10, give a\n    // small bonus.\n    if (linkTextAsNum < 2) {\n      score = -30;\n    } else {\n      score = Math.max(0, 10 - linkTextAsNum);\n    }\n\n    // If it appears that the current page number is greater than\n    // this links page number, it's a very bad sign. Give it a big\n    // penalty.\n    if (pageNum && pageNum >= linkTextAsNum) {\n      score -= 50;\n    }\n  }\n\n  return score;\n}\n","export default function scorePageInLink(pageNum, isWp) {\n  // page in the link = bonus. Intentionally ignore wordpress because\n  // their ?p=123 link style gets caught by this even though it means\n  // separate documents entirely.\n  if (pageNum && !isWp) {\n    return 50;\n  }\n\n  return 0;\n}\n","export const DIGIT_RE = /\\d/;\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\n  EXTRANEOUS_LINK_HINTS.join('|'),\n  'i'\n);\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\nexport const NEXT_LINK_TEXT_RE = new RegExp(\n  '(next|weiter|continue|>([^|]|$)|»([^|]|$))',\n  'i'\n);\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n","import { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nexport default function scoreExtraneousLinks(href) {\n  // If the URL itself contains extraneous values, give a penalty.\n  if (EXTRANEOUS_LINK_HINTS_RE.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n","import { range } from 'utils';\nimport {\n  NEGATIVE_SCORE_RE,\n  POSITIVE_SCORE_RE,\n  PAGE_RE,\n} from 'utils/dom/constants';\nimport { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nfunction makeSig($link) {\n  return `${$link.attr('class') || ''} ${$link.attr('id') || ''}`;\n}\n\nexport default function scoreByParents($link) {\n  // If a parent node contains paging-like classname or id, give a\n  // bonus. Additionally, if a parent_node contains bad content\n  // (like 'sponsor'), give a penalty.\n  let $parent = $link.parent();\n  let positiveMatch = false;\n  let negativeMatch = false;\n  let score = 0;\n\n  Array.from(range(0, 4)).forEach(() => {\n    if ($parent.length === 0) {\n      return;\n    }\n\n    const parentData = makeSig($parent, ' ');\n\n    // If we have 'page' or 'paging' in our data, that's a good\n    // sign. Add a bonus.\n    if (!positiveMatch && PAGE_RE.test(parentData)) {\n      positiveMatch = true;\n      score += 25;\n    }\n\n    // If we have 'comment' or something in our data, and\n    // we don't have something like 'content' as well, that's\n    // a bad sign. Give a penalty.\n    if (\n      !negativeMatch &&\n      NEGATIVE_SCORE_RE.test(parentData) &&\n      EXTRANEOUS_LINK_HINTS_RE.test(parentData)\n    ) {\n      if (!POSITIVE_SCORE_RE.test(parentData)) {\n        negativeMatch = true;\n        score -= 25;\n      }\n    }\n\n    $parent = $parent.parent();\n  });\n\n  return score;\n}\n","import { PREV_LINK_TEXT_RE } from '../constants';\n\nexport default function scorePrevLink(linkData) {\n  // If the link has something like \"previous\", its definitely\n  // an old link, skip it.\n  if (PREV_LINK_TEXT_RE.test(linkData)) {\n    return -200;\n  }\n\n  return 0;\n}\n","import URL from 'url';\n\nimport { DIGIT_RE, EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nexport default function shouldScore(\n  href,\n  articleUrl,\n  baseUrl,\n  parsedUrl,\n  linkText,\n  previousUrls\n) {\n  // skip if we've already fetched this url\n  if (previousUrls.find(url => href === url) !== undefined) {\n    return false;\n  }\n\n  // If we've already parsed this URL, or the URL matches the base\n  // URL, or is empty, skip it.\n  if (!href || href === articleUrl || href === baseUrl) {\n    return false;\n  }\n\n  const { hostname } = parsedUrl;\n  const { hostname: linkHost } = URL.parse(href);\n\n  // Domain mismatch.\n  if (linkHost !== hostname) {\n    return false;\n  }\n\n  // If href doesn't contain a digit after removing the base URL,\n  // it's certainly not the next page.\n  const fragment = href.replace(baseUrl, '');\n  if (!DIGIT_RE.test(fragment)) {\n    return false;\n  }\n\n  // This link has extraneous content (like \"comment\") in its link\n  // text, so we skip it.\n  if (EXTRANEOUS_LINK_HINTS_RE.test(linkText)) {\n    return false;\n  }\n\n  // Next page link text is never long, skip if it is too long.\n  if (linkText.length > 25) {\n    return false;\n  }\n\n  return true;\n}\n","export default function scoreBaseUrl(href, baseRegex) {\n  // If the baseUrl isn't part of this URL, penalize this\n  // link. It could still be the link, but the odds are lower.\n  // Example:\n  // http://www.actionscript.org/resources/articles/745/1/JavaScript-and-VBScript-Injection-in-ActionScript-3/Page1.html\n  if (!baseRegex.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n","import { NEXT_LINK_TEXT_RE } from '../constants';\n\nexport default function scoreNextLinkText(linkData) {\n  // Things like \"next\", \">>\", etc.\n  if (NEXT_LINK_TEXT_RE.test(linkData)) {\n    return 50;\n  }\n\n  return 0;\n}\n","import { NEXT_LINK_TEXT_RE, CAP_LINK_TEXT_RE } from '../constants';\n\nexport default function scoreCapLinks(linkData) {\n  // Cap links are links like \"last\", etc.\n  if (CAP_LINK_TEXT_RE.test(linkData)) {\n    // If we found a link like \"last\", but we've already seen that\n    // this link is also \"next\", it's fine. If it's not been\n    // previously marked as \"next\", then it's probably bad.\n    // Penalize.\n    if (NEXT_LINK_TEXT_RE.test(linkData)) {\n      return -65;\n    }\n  }\n\n  return 0;\n}\n","import URL from 'url';\n\nimport { getAttrs, isWordpress } from 'utils/dom';\nimport { removeAnchor, pageNumFromUrl } from 'utils/text';\n\nimport {\n  scoreSimilarity,\n  scoreLinkText,\n  scorePageInLink,\n  scoreExtraneousLinks,\n  scoreByParents,\n  scorePrevLink,\n  shouldScore,\n  scoreBaseUrl,\n  scoreCapLinks,\n  scoreNextLinkText,\n} from './utils';\n\nexport function makeBaseRegex(baseUrl) {\n  return new RegExp(`^${baseUrl}`, 'i');\n}\n\nfunction makeSig($link, linkText) {\n  return `${linkText || $link.text()} ${$link.attr('class') || ''} ${$link.attr(\n    'id'\n  ) || ''}`;\n}\n\nexport default function scoreLinks({\n  links,\n  articleUrl,\n  baseUrl,\n  parsedUrl,\n  $,\n  previousUrls = [],\n}) {\n  parsedUrl = parsedUrl || URL.parse(articleUrl);\n  const baseRegex = makeBaseRegex(baseUrl);\n  const isWp = isWordpress($);\n\n  // Loop through all links, looking for hints that they may be next-page\n  // links. Things like having \"page\" in their textContent, className or\n  // id, or being a child of a node with a page-y className or id.\n  //\n  // After we do that, assign each page a score, and pick the one that\n  // looks most like the next page link, as long as its score is strong\n  // enough to have decent confidence.\n  const scoredPages = links.reduce((possiblePages, link) => {\n    // Remove any anchor data since we don't do a good job\n    // standardizing URLs (it's hard), we're going to do\n    // some checking with and without a trailing slash\n    const attrs = getAttrs(link);\n\n    // if href is undefined, return\n    if (!attrs.href) return possiblePages;\n\n    const href = removeAnchor(attrs.href);\n    const $link = $(link);\n    const linkText = $link.text();\n\n    if (\n      !shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls)\n    ) {\n      return possiblePages;\n    }\n\n    // ## PASSED THE FIRST-PASS TESTS. Start scoring. ##\n    if (!possiblePages[href]) {\n      possiblePages[href] = {\n        score: 0,\n        linkText,\n        href,\n      };\n    } else {\n      possiblePages[href].linkText = `${\n        possiblePages[href].linkText\n      }|${linkText}`;\n    }\n\n    const possiblePage = possiblePages[href];\n    const linkData = makeSig($link, linkText);\n    const pageNum = pageNumFromUrl(href);\n\n    let score = scoreBaseUrl(href, baseRegex);\n    score += scoreNextLinkText(linkData);\n    score += scoreCapLinks(linkData);\n    score += scorePrevLink(linkData);\n    score += scoreByParents($link);\n    score += scoreExtraneousLinks(href);\n    score += scorePageInLink(pageNum, isWp);\n    score += scoreLinkText(linkText, pageNum);\n    score += scoreSimilarity(score, articleUrl, href);\n\n    possiblePage.score = score;\n\n    return possiblePages;\n  }, {});\n\n  return Reflect.ownKeys(scoredPages).length === 0 ? null : scoredPages;\n}\n","import URL from 'url';\n\nimport { articleBaseUrl, removeAnchor } from 'utils/text';\nimport scoreLinks from './scoring/score-links';\n\n// Looks for and returns next page url\n// for multi-page articles\nconst GenericNextPageUrlExtractor = {\n  extract({ $, url, parsedUrl, previousUrls = [] }) {\n    parsedUrl = parsedUrl || URL.parse(url);\n\n    const articleUrl = removeAnchor(url);\n    const baseUrl = articleBaseUrl(url, parsedUrl);\n\n    const links = $('a[href]').toArray();\n\n    const scoredLinks = scoreLinks({\n      links,\n      articleUrl,\n      baseUrl,\n      parsedUrl,\n      $,\n      previousUrls,\n    });\n\n    // If no links were scored, return null\n    if (!scoredLinks) return null;\n\n    // now that we've scored all possible pages,\n    // find the biggest one.\n    const topPage = Reflect.ownKeys(scoredLinks).reduce(\n      (acc, link) => {\n        const scoredLink = scoredLinks[link];\n        return scoredLink.score > acc.score ? scoredLink : acc;\n      },\n      { score: -100 }\n    );\n\n    // If the score is less than 50, we're not confident enough to use it,\n    // so we fail.\n    if (topPage.score >= 50) {\n      return topPage.href;\n    }\n\n    return null;\n  },\n};\n\nexport default GenericNextPageUrlExtractor;\n","export const CANONICAL_META_SELECTORS = ['og:url'];\n","import URL from 'url';\nimport { extractFromMeta } from 'utils/dom';\n\nimport { CANONICAL_META_SELECTORS } from './constants';\n\nfunction parseDomain(url) {\n  const parsedUrl = URL.parse(url);\n  const { hostname } = parsedUrl;\n  return hostname;\n}\n\nfunction result(url) {\n  return {\n    url,\n    domain: parseDomain(url),\n  };\n}\n\nconst GenericUrlExtractor = {\n  extract({ $, url, metaCache }) {\n    const $canonical = $('link[rel=canonical]');\n    if ($canonical.length !== 0) {\n      const href = $canonical.attr('href');\n      if (href) {\n        return result(href);\n      }\n    }\n\n    const metaUrl = extractFromMeta($, CANONICAL_META_SELECTORS, metaCache);\n    if (metaUrl) {\n      return result(metaUrl);\n    }\n\n    return result(url);\n  },\n};\n\nexport default GenericUrlExtractor;\n","export const EXCERPT_META_SELECTORS = ['og:description', 'twitter:description'];\n","import ellipsize from 'ellipsize';\n\nimport { extractFromMeta, stripTags } from 'utils/dom';\n\nimport { EXCERPT_META_SELECTORS } from './constants';\n\nexport function clean(content, $, maxLength = 200) {\n  content = content.replace(/[\\s\\n]+/g, ' ').trim();\n  return ellipsize(content, maxLength, { ellipse: '&hellip;' });\n}\n\nconst GenericExcerptExtractor = {\n  extract({ $, content, metaCache }) {\n    const excerpt = extractFromMeta($, EXCERPT_META_SELECTORS, metaCache);\n    if (excerpt) {\n      return clean(stripTags(excerpt, $));\n    }\n    // Fall back to excerpting from the extracted content\n    const maxLength = 200;\n    const shortContent = content.slice(0, maxLength * 5);\n    return clean($(shortContent).text(), $, maxLength);\n  },\n};\n\nexport default GenericExcerptExtractor;\n","import cheerio from 'cheerio';\n\nimport { normalizeSpaces } from 'utils/text';\n\nconst GenericWordCountExtractor = {\n  extract({ content }) {\n    const $ = cheerio.load(content);\n    const $content = $('div').first();\n\n    const text = normalizeSpaces($content.text());\n    return text.split(/\\s/).length;\n  },\n};\n\nexport default GenericWordCountExtractor;\n","import cheerio from 'cheerio';\nimport stringDirection from 'string-direction';\n\nimport GenericContentExtractor from './content/extractor';\nimport GenericTitleExtractor from './title/extractor';\nimport GenericAuthorExtractor from './author/extractor';\nimport GenericDatePublishedExtractor from './date-published/extractor';\nimport GenericDekExtractor from './dek/extractor';\nimport GenericLeadImageUrlExtractor from './lead-image-url/extractor';\nimport GenericNextPageUrlExtractor from './next-page-url/extractor';\nimport GenericUrlExtractor from './url/extractor';\nimport GenericExcerptExtractor from './excerpt/extractor';\nimport GenericWordCountExtractor from './word-count/extractor';\n\nconst GenericExtractor = {\n  // This extractor is the default for all domains\n  domain: '*',\n  title: GenericTitleExtractor.extract,\n  date_published: GenericDatePublishedExtractor.extract,\n  author: GenericAuthorExtractor.extract,\n  content: GenericContentExtractor.extract.bind(GenericContentExtractor),\n  lead_image_url: GenericLeadImageUrlExtractor.extract,\n  dek: GenericDekExtractor.extract,\n  next_page_url: GenericNextPageUrlExtractor.extract,\n  url_and_domain: GenericUrlExtractor.extract,\n  excerpt: GenericExcerptExtractor.extract,\n  word_count: GenericWordCountExtractor.extract,\n  direction: ({ title }) => stringDirection.getDirection(title),\n\n  extract(options) {\n    const { html, $ } = options;\n\n    if (html && !$) {\n      const loaded = cheerio.load(html);\n      options.$ = loaded;\n    }\n\n    const title = this.title(options);\n    const date_published = this.date_published(options);\n    const author = this.author(options);\n    const content = this.content({ ...options, title });\n    const lead_image_url = this.lead_image_url({ ...options, content });\n    const dek = this.dek({ ...options, content });\n    const next_page_url = this.next_page_url(options);\n    const excerpt = this.excerpt({ ...options, content });\n    const word_count = this.word_count({ ...options, content });\n    const direction = this.direction({ title });\n    const { url, domain } = this.url_and_domain(options);\n\n    return {\n      title,\n      author,\n      date_published: date_published || null,\n      dek,\n      lead_image_url,\n      content,\n      next_page_url,\n      url,\n      domain,\n      excerpt,\n      word_count,\n      direction,\n    };\n  },\n};\n\nexport default GenericExtractor;\n","import { MediumExtractor, BloggerExtractor } from './custom';\n\nconst Detectors = {\n  'meta[name=\"al:ios:app_name\"][value=\"Medium\"]': MediumExtractor,\n  'meta[name=\"generator\"][value=\"blogger\"]': BloggerExtractor,\n};\n\nexport default function detectByHtml($) {\n  const selector = Reflect.ownKeys(Detectors).find(s => $(s).length > 0);\n\n  return Detectors[selector];\n}\n","import URL from 'url';\n\nimport Extractors from './all';\nimport GenericExtractor from './generic';\nimport detectByHtml from './detect-by-html';\nimport { apiExtractors } from './add-extractor';\n\nexport default function getExtractor(url, parsedUrl, $) {\n  parsedUrl = parsedUrl || URL.parse(url);\n  const { hostname } = parsedUrl;\n  const baseDomain = hostname\n    .split('.')\n    .slice(-2)\n    .join('.');\n\n  return (\n    apiExtractors[hostname] ||\n    apiExtractors[baseDomain] ||\n    Extractors[hostname] ||\n    Extractors[baseDomain] ||\n    detectByHtml($) ||\n    GenericExtractor\n  );\n}\n","import Cleaners from 'cleaners';\nimport { convertNodeTo, makeLinksAbsolute } from 'utils/dom';\nimport GenericExtractor from './generic';\n\n// Remove elements by an array of selectors\nexport function cleanBySelectors($content, $, { clean }) {\n  if (!clean) return $content;\n\n  $(clean.join(','), $content).remove();\n\n  return $content;\n}\n\n// Transform matching elements\nexport function transformElements($content, $, { transforms }) {\n  if (!transforms) return $content;\n\n  Reflect.ownKeys(transforms).forEach(key => {\n    const $matches = $(key, $content);\n    const value = transforms[key];\n\n    // If value is a string, convert directly\n    if (typeof value === 'string') {\n      $matches.each((index, node) => {\n        convertNodeTo($(node), $, transforms[key]);\n      });\n    } else if (typeof value === 'function') {\n      // If value is function, apply function to node\n      $matches.each((index, node) => {\n        const result = value($(node), $);\n        // If function returns a string, convert node to that value\n        if (typeof result === 'string') {\n          convertNodeTo($(node), $, result);\n        }\n      });\n    }\n  });\n\n  return $content;\n}\n\nfunction findMatchingSelector($, selectors, extractHtml, allowMultiple) {\n  return selectors.find(selector => {\n    if (Array.isArray(selector)) {\n      if (extractHtml) {\n        return selector.reduce((acc, s) => acc && $(s).length > 0, true);\n      }\n\n      const [s, attr] = selector;\n      return (\n        (allowMultiple || (!allowMultiple && $(s).length === 1)) &&\n        $(s).attr(attr) &&\n        $(s)\n          .attr(attr)\n          .trim() !== ''\n      );\n    }\n\n    return (\n      (allowMultiple || (!allowMultiple && $(selector).length === 1)) &&\n      $(selector)\n        .text()\n        .trim() !== ''\n    );\n  });\n}\n\nexport function select(opts) {\n  const { $, type, extractionOpts, extractHtml = false } = opts;\n  // Skip if there's not extraction for this type\n  if (!extractionOpts) return null;\n\n  // If a string is hardcoded for a type (e.g., Wikipedia\n  // contributors), return the string\n  if (typeof extractionOpts === 'string') return extractionOpts;\n\n  const { selectors, defaultCleaner = true, allowMultiple } = extractionOpts;\n\n  const matchingSelector = findMatchingSelector(\n    $,\n    selectors,\n    extractHtml,\n    allowMultiple\n  );\n\n  if (!matchingSelector) return null;\n\n  function transformAndClean($node) {\n    makeLinksAbsolute($node, $, opts.url || '');\n    cleanBySelectors($node, $, extractionOpts);\n    transformElements($node, $, extractionOpts);\n    return $node;\n  }\n\n  function selectHtml() {\n    // If the selector type requests html as its return type\n    // transform and clean the element with provided selectors\n    let $content;\n\n    // If matching selector is an array, we're considering this a\n    // multi-match selection, which allows the parser to choose several\n    // selectors to include in the result. Note that all selectors in the\n    // array must match in order for this selector to trigger\n    if (Array.isArray(matchingSelector)) {\n      $content = $(matchingSelector.join(','));\n      const $wrapper = $('<div></div>');\n      $content.each((_, element) => {\n        $wrapper.append(element);\n      });\n\n      $content = $wrapper;\n    } else {\n      $content = $(matchingSelector);\n    }\n\n    // Wrap in div so transformation can take place on root element\n    $content.wrap($('<div></div>'));\n    $content = $content.parent();\n    $content = transformAndClean($content);\n    if (Cleaners[type]) {\n      Cleaners[type]($content, { ...opts, defaultCleaner });\n    }\n\n    if (allowMultiple) {\n      return $content\n        .children()\n        .toArray()\n        .map(el => $.html($(el)));\n    }\n\n    return $.html($content);\n  }\n\n  if (extractHtml) {\n    return selectHtml(matchingSelector);\n  }\n\n  let $match;\n  let result;\n  // if selector is an array (e.g., ['img', 'src']),\n  // extract the attr\n  if (Array.isArray(matchingSelector)) {\n    const [selector, attr, transform] = matchingSelector;\n    $match = $(selector);\n    $match = transformAndClean($match);\n    result = $match.map((_, el) => {\n      const item = $(el)\n        .attr(attr)\n        .trim();\n      return transform ? transform(item) : item;\n    });\n  } else {\n    $match = $(matchingSelector);\n    $match = transformAndClean($match);\n    result = $match.map((_, el) =>\n      $(el)\n        .text()\n        .trim()\n    );\n  }\n\n  result =\n    Array.isArray(result.toArray()) && allowMultiple\n      ? result.toArray()\n      : result[0];\n  // Allow custom extractor to skip default cleaner\n  // for this type; defaults to true\n  if (defaultCleaner && Cleaners[type]) {\n    return Cleaners[type](result, { ...opts, ...extractionOpts });\n  }\n\n  return result;\n}\n\nexport function selectExtendedTypes(extend, opts) {\n  const results = {};\n  Reflect.ownKeys(extend).forEach(t => {\n    if (!results[t]) {\n      results[t] = select({ ...opts, type: t, extractionOpts: extend[t] });\n    }\n  });\n  return results;\n}\n\nfunction extractResult(opts) {\n  const { type, extractor, fallback = true } = opts;\n\n  const result = select({ ...opts, extractionOpts: extractor[type] });\n\n  // If custom parser succeeds, return the result\n  if (result) {\n    return result;\n  }\n\n  // If nothing matches the selector, and fallback is enabled,\n  // run the Generic extraction\n  if (fallback) return GenericExtractor[type](opts);\n\n  return null;\n}\n\nconst RootExtractor = {\n  extract(extractor = GenericExtractor, opts) {\n    const { contentOnly, extractedTitle } = opts;\n    // This is the generic extractor. Run its extract method\n    if (extractor.domain === '*') return extractor.extract(opts);\n\n    opts = {\n      ...opts,\n      extractor,\n    };\n\n    if (contentOnly) {\n      const content = extractResult({\n        ...opts,\n        type: 'content',\n        extractHtml: true,\n        title: extractedTitle,\n      });\n      return {\n        content,\n      };\n    }\n    const title = extractResult({ ...opts, type: 'title' });\n    const date_published = extractResult({ ...opts, type: 'date_published' });\n    const author = extractResult({ ...opts, type: 'author' });\n    const next_page_url = extractResult({ ...opts, type: 'next_page_url' });\n    const content = extractResult({\n      ...opts,\n      type: 'content',\n      extractHtml: true,\n      title,\n    });\n    const lead_image_url = extractResult({\n      ...opts,\n      type: 'lead_image_url',\n      content,\n    });\n    const excerpt = extractResult({ ...opts, type: 'excerpt', content });\n    const dek = extractResult({ ...opts, type: 'dek', content, excerpt });\n    const word_count = extractResult({ ...opts, type: 'word_count', content });\n    const direction = extractResult({ ...opts, type: 'direction', title });\n    const { url, domain } = extractResult({\n      ...opts,\n      type: 'url_and_domain',\n    }) || { url: null, domain: null };\n\n    let extendedResults = {};\n    if (extractor.extend) {\n      extendedResults = selectExtendedTypes(extractor.extend, opts);\n    }\n\n    return {\n      title,\n      content,\n      author,\n      date_published,\n      lead_image_url,\n      dek,\n      next_page_url,\n      url,\n      domain,\n      excerpt,\n      word_count,\n      direction,\n      ...extendedResults,\n    };\n  },\n};\n\nexport default RootExtractor;\n","import { removeAnchor } from 'utils/text';\nimport RootExtractor from 'extractors/root-extractor';\nimport GenericExtractor from 'extractors/generic';\nimport Resource from 'resource';\n\nexport default async function collectAllPages({\n  next_page_url,\n  html,\n  $,\n  metaCache,\n  result,\n  Extractor,\n  title,\n  url,\n}) {\n  // At this point, we've fetched just the first page\n  let pages = 1;\n  const previousUrls = [removeAnchor(url)];\n\n  // If we've gone over 26 pages, something has\n  // likely gone wrong.\n  while (next_page_url && pages < 26) {\n    pages += 1;\n    // eslint-disable-next-line no-await-in-loop\n    $ = await Resource.create(next_page_url);\n    html = $.html();\n\n    const extractorOpts = {\n      url: next_page_url,\n      html,\n      $,\n      metaCache,\n      contentOnly: true,\n      extractedTitle: title,\n      previousUrls,\n    };\n\n    const nextPageResult = RootExtractor.extract(Extractor, extractorOpts);\n\n    previousUrls.push(next_page_url);\n    result = {\n      ...result,\n      content: `${result.content}<hr><h4>Page ${pages}</h4>${\n        nextPageResult.content\n      }`,\n    };\n\n    // eslint-disable-next-line prefer-destructuring\n    next_page_url = nextPageResult.next_page_url;\n  }\n\n  const word_count = GenericExtractor.word_count({\n    content: `<div>${result.content}</div>`,\n  });\n  return {\n    ...result,\n    total_pages: pages,\n    pages_rendered: pages,\n    word_count,\n  };\n}\n","import URL from 'url';\nimport TurndownService from 'turndown';\n\nimport Resource from 'resource';\nimport { validateUrl } from 'utils';\nimport addCustomExtractor from 'extractors/add-extractor';\nimport getExtractor from 'extractors/get-extractor';\nimport RootExtractor, { selectExtendedTypes } from 'extractors/root-extractor';\nimport collectAllPages from 'extractors/collect-all-pages';\n\nconst Mercury = {\n  parse: async (url, { html, ...opts } = {}) => {\n    const {\n      fetchAllPages = true,\n      fallback = true,\n      contentType = 'html',\n      headers = {},\n      extend,\n    } = opts;\n\n    const parsedUrl = URL.parse(url);\n\n    if (!validateUrl(parsedUrl)) {\n      return {\n        error: true,\n        message:\n          'The url parameter passed does not look like a valid URL. Please check your URL and try again.',\n      };\n    }\n\n    const $ = await Resource.create(url, html, parsedUrl, headers);\n\n    // If we found an error creating the resource, return that error\n    if ($.failed) {\n      return $;\n    }\n\n    const Extractor = getExtractor(url, parsedUrl, $);\n    // console.log(`Using extractor for ${Extractor.domain}`);\n\n    // if html still has not been set (i.e., url passed to Mercury.parse),\n    // set html from the response of Resource.create\n    if (!html) {\n      html = $.html();\n    }\n\n    // Cached value of every meta name in our document.\n    // Used when extracting title/author/date_published/dek\n    const metaCache = $('meta')\n      .map((_, node) => $(node).attr('name'))\n      .toArray();\n\n    let extendedTypes = {};\n    if (extend) {\n      extendedTypes = selectExtendedTypes(extend, { $, url, html });\n    }\n\n    let result = RootExtractor.extract(Extractor, {\n      url,\n      html,\n      $,\n      metaCache,\n      parsedUrl,\n      fallback,\n      contentType,\n    });\n\n    const { title, next_page_url } = result;\n\n    // Fetch more pages if next_page_url found\n    if (fetchAllPages && next_page_url) {\n      result = await collectAllPages({\n        Extractor,\n        next_page_url,\n        html,\n        $,\n        metaCache,\n        result,\n        title,\n        url,\n      });\n    } else {\n      result = {\n        ...result,\n        total_pages: 1,\n        rendered_pages: 1,\n      };\n    }\n\n    if (contentType === 'markdown') {\n      const turndownService = new TurndownService();\n      result.content = turndownService.turndown(result.content);\n    } else if (contentType === 'text') {\n      result.content = $.text($(result.content));\n    }\n\n    return { ...result, ...extendedTypes };\n  },\n\n  // A convenience method for getting a resource\n  // to work with, e.g., for custom extractor generator\n  fetchResource: url => Resource.create(url),\n\n  addExtractor: extractor => addCustomExtractor(extractor),\n};\n\nexport default Mercury;\n"],"names":["NORMALIZE_RE","normalizeSpaces","text","replace","trim","extractFromUrl","url","regexList","matchRe","find","re","test","exec","PAGE_IN_HREF_RE","RegExp","HAS_ALPHA_RE","IS_ALPHA_RE","IS_DIGIT_RE","ENCODING_RE","DEFAULT_ENCODING","pageNumFromUrl","matches","match","pageNum","parseInt","removeAnchor","split","isGoodSegment","segment","index","firstSegmentHasLetters","goodSegment","length","toLowerCase","articleBaseUrl","parsed","parsedUrl","URL","parse","protocol","host","path","cleanedSegments","reverse","reduce","acc","rawSegment","includes","possibleSegment","fileExt","push","join","SENTENCE_END_RE","hasSentenceEnd","excerptContent","content","words","slice","getEncoding","str","encoding","iconv","encodingExists","REQUEST_HEADERS","FETCH_TIMEOUT","BAD_CONTENT_TYPES","BAD_CONTENT_TYPES_RE","MAX_CONTENT_LENGTH","get","options","Promise","resolve","reject","request","err","response","body","validateResponse","parseNon200","statusMessage","statusCode","Error","error","contentType","contentLength","headers","fetchResource","encodeURI","href","timeout","jar","gzip","followAllRedirects","window","followRedirect","e","message","convertMetaProp","$","from","to","each","_","node","$node","value","attr","removeAttr","normalizeMetaTags","SPACER_RE","KEEP_CLASS","KEEP_SELECTORS","STRIP_OUTPUT_TAGS","WHITELIST_ATTRS","WHITELIST_ATTRS_RE","CLEAN_CONDITIONALLY_TAGS","HEADER_TAGS","HEADER_TAG_LIST","UNLIKELY_CANDIDATES_BLACKLIST","UNLIKELY_CANDIDATES_WHITELIST","DIV_TO_P_BLOCK_TAGS","POSITIVE_SCORE_HINTS","POSITIVE_SCORE_RE","NEGATIVE_SCORE_HINTS","NEGATIVE_SCORE_RE","IS_WP_SELECTOR","PAGE_RE","BLOCK_LEVEL_TAGS","BLOCK_LEVEL_TAGS_RE","candidatesBlacklist","CANDIDATES_BLACKLIST","candidatesWhitelist","CANDIDATES_WHITELIST","stripUnlikelyCandidates","not","classes","id","classAndId","remove","brsToPs","collapsing","element","$element","nextElement","next","tagName","paragraphize","br","sibling","nextSibling","p","appendTo","replaceWith","convertDivs","div","$div","convertable","children","convertNodeTo","convertSpans","span","$span","parents","convertToParagraphs","tag","attrs","getAttrs","attribString","Reflect","ownKeys","map","key","html","contents","cleanForHeight","$img","height","width","removeSpacers","cleanImages","$article","img","markToKeep","article","tags","hostname","addClass","stripJunkTags","cleanHOnes","$hOnes","removeAllButWhitelist","setAttrs","removeClass","cleanAttributes","parent","removeEmpty","$p","NON_TOP_CANDIDATE_TAGS","NON_TOP_CANDIDATE_TAGS_RE","HNEWS_CONTENT_SELECTORS","PHOTO_HINTS","PHOTO_HINTS_RE","READABILITY_ASSET","PARAGRAPH_SCORE_TAGS","CHILD_CONTENT_TAGS","BAD_TAGS","getWeight","score","getScore","parseFloat","scoreCommas","idkRe","scoreLength","textLength","chunks","lengthBonus","Math","min","max","scoreParagraph","setScore","addScore","amount","getOrInitScore","addToParent","weightNodes","scoreNode","addScoreTo","scorePs","$parent","rawScore","scoreContent","forEach","parentSelector","childSelector","mergeSiblings","$candidate","topScore","siblingScoreThreshold","wrappingDiv","$sibling","siblingScore","append","contentBonus","density","linkDensity","newScore","siblingContent","siblingContentLength","first","findTopCandidate","removeUnlessContent","weight","hasClass","pCount","inputCount","imgCount","nodeIsList","previousNode","prev","scriptCount","cleanTags","cleanHeaders","title","header","$header","prevAll","rewriteTopLevel","absolutize","rootUrl","baseUrl","absoluteUrl","setAttr","absolutizeSet","$content","urlSet","srcset","candidates","absoluteCandidates","candidate","parts","absoluteUrlSet","Set","makeLinksAbsolute","totalTextLength","linkText","linkLength","extractFromMeta","metaNames","cachedNames","foundNames","filter","name","indexOf","type","nodes","values","toArray","metaValue","stripTags","isGoodNode","maxChildren","withinComment","extractFromSelectors","selectors","textOnly","selector","cleanText","commentParent","class","nodeClass","undefined","nodeIsSufficient","isWordpress","attribs","attributes","val","setAttribute","removeAttribute","IS_LINK","IMAGE_RE","IS_IMAGE","IS_SRCSET","TAGS_TO_REMOVE","convertLazyLoadedImages","isComment","cleanComments","root","clean","Resource","create","preparedResponse","result","validResponse","failed","generateDoc","encodeDoc","decodedContent","decode","cheerio","load","contentTypeSelector","metaContentType","properEncoding","range","start","end","validateUrl","merge","extractor","domains","domain","mergeSupportedDomains","supportedDomains","apiExtractors","addExtractor","Object","assign","BloggerExtractor","transforms","noscript","author","date_published","NYMagExtractor","h1","$children","dek","WikipediaExtractor","defaultCleaner","prepend","TwitterExtractor","tweets","$tweetContainer","s","NYTimesExtractor","src","lead_image_url","next_page_url","excerpt","TheAtlanticExtractor","NewYorkerExtractor","format","timezone","WiredExtractor","MSNExtractor","YahooExtractor","BuzzfeedExtractor","h2","has","WikiaExtractor","LittleThingsExtractor","PoliticoExtractor","DeadspinExtractor","youtubeId","BroadwayWorldExtractor","ApartmentTherapyExtractor","data","JSON","sources","MediumExtractor","iframe","ytRe","thumb","decodeURIComponent","$caption","empty","figure","WwwTmzComExtractor","WwwWashingtonpostComExtractor","WwwHuffingtonpostComExtractor","NewrepublicComExtractor","MoneyCnnComExtractor","WwwThevergeComExtractor","WwwCnnComExtractor","$text","WwwAolComExtractor","WwwYoutubeComExtractor","videoId","WwwTheguardianComExtractor","WwwSbnationComExtractor","WwwBloombergComExtractor","WwwBustleComExtractor","WwwNprOrgExtractor","WwwRecodeNetExtractor","QzComExtractor","WwwDmagazineComExtractor","WwwReutersComExtractor","MashableComExtractor","WwwChicagotribuneComExtractor","WwwVoxComExtractor","imgHtml","NewsNationalgeographicComExtractor","$imgSrc","WwwNationalgeographicComExtractor","$imageParent","$dataAttrContainer","imgPath1","imgPath2","WwwLatimesComExtractor","$figure","PagesixComExtractor","ThefederalistpapersOrgExtractor","WwwCbssportsComExtractor","WwwMsnbcComExtractor","WwwThepoliticalinsiderComExtractor","WwwMentalflossComExtractor","AbcnewsGoComExtractor","WwwNydailynewsComExtractor","WwwCnbcComExtractor","WwwPopsugarComExtractor","ObserverComExtractor","PeopleComExtractor","WwwUsmagazineComExtractor","WwwRollingstoneComExtractor","twofortysevensportsComExtractor","UproxxComExtractor","WwwEonlineComExtractor","WwwMiamiheraldComExtractor","WwwRefinery29ComExtractor","WwwMacrumorsComExtractor","WwwAndroidcentralComExtractor","WwwSiComExtractor","WwwRawstoryComExtractor","WwwCnetComExtractor","WwwCinemablendComExtractor","WwwTodayComExtractor","WwwHowtogeekComExtractor","WwwAlComExtractor","WwwThepennyhoarderComExtractor","WwwWesternjournalismComExtractor","FusionNetExtractor","WwwAmericanowComExtractor","ScienceflyComExtractor","HellogigglesComExtractor","ThoughtcatalogComExtractor","WwwNjComExtractor","WwwInquisitrComExtractor","WwwNbcnewsComExtractor","FortuneComExtractor","WwwLinkedinComExtractor","ObamawhitehouseArchivesGovExtractor","WwwOpposingviewsComExtractor","WwwProspectmagazineCoUkExtractor","ForwardComExtractor","WwwQdailyComExtractor","GothamistComExtractor","WwwFoolComExtractor","WwwSlateComExtractor","IciRadioCanadaCaExtractor","WwwFortinetComExtractor","WwwFastcompanyComExtractor","BlisterreviewComExtractor","figcaption","NewsMynaviJpExtractor","ClinicaltrialsGovExtractor","GithubComExtractor","WwwRedditComExtractor","bgImg","css","OtrsComExtractor","WwwOssnewsJpExtractor","BuzzapJpExtractor","WwwAsahiComExtractor","WwwSanwaCoJpExtractor","WwwElecomCoJpExtractor","table","ScanNetsecurityNeJpExtractor","JvndbJvnJpExtractor","GeniusComExtractor","res","json","song","release_date","album","cover_art_url","WwwJnsaOrgExtractor","PhpspotOrgExtractor","WwwInfoqComExtractor","WwwMoongiftJpExtractor","WwwItmediaCoJpExtractor","WwwPublickey1JpExtractor","TakagihiromitsuJpExtractor","BookwalkerJpExtractor","WwwYomiuriCoJpExtractor","JapanCnetComExtractor","DeadlineComExtractor","innerHtml","WwwGizmodoJpExtractor","GetnewsJpExtractor","WwwLifehackerJpExtractor","SectIijAdJpExtractor","WwwOreillyCoJpExtractor","WwwIpaGoJpExtractor","WeeklyAsciiJpExtractor","TechlogIijAdJpExtractor","WiredJpExtractor","dataOriginal","JapanZdnetComExtractor","WwwRbbtodayComExtractor","WwwLemondeFrExtractor","WwwPhoronixComExtractor","PitchforkComExtractor","extend","BiorxivOrgExtractor","EpaperZeitDeExtractor","byline","linkbox","keys","CustomExtractors","CLEAN_AUTHOR_RE","TEXT_LINK_RE","MS_DATE_STRING","SEC_DATE_STRING","CLEAN_DATE_STRING_RE","TIME_MERIDIAN_SPACE_RE","TIME_MERIDIAN_DOTS_RE","TIME_NOW_STRING","timeUnits","allTimeUnits","TIME_AGO_STRING","months","allMonths","timestamp1","timestamp2","timestamp3","SPLIT_DATE_STRING","TIME_WITH_OFFSET_RE","TITLE_SPLITTERS_RE","DOMAIN_ENDINGS_RE","cleanAuthor","leadImageUrl","validUrl","isWebUri","cleanDek","dekText","cleanDateString","dateString","createDate","moment","Date","fragments","subtract","tz","parseFormat","cleanDatePublished","toISOString","date","isValid","extractCleanNode","cleanConditionally","cleanTitle","resolveSplitTitle","extractBreadcrumbTitle","splitTitle","termCounts","titleText","maxTerm","termCount","splitEnds","longestEnd","cleanDomainFromTitle","nakedDomain","startSlug","startSlugRatio","wuzzy","levenshtein","endSlug","endSlugRatio","newTitle","Cleaners","cleanImage","cleanContent","extractBestNode","opts","$topCandidate","GenericContentExtractor","defaultOpts","extract","getContentNode","cleanAndReturnNode","k","STRONG_TITLE_META_TAGS","WEAK_TITLE_META_TAGS","STRONG_TITLE_SELECTORS","WEAK_TITLE_SELECTORS","GenericTitleExtractor","metaCache","AUTHOR_META_TAGS","AUTHOR_MAX_LENGTH","AUTHOR_SELECTORS","bylineRe","BYLINE_SELECTORS_RE","GenericAuthorExtractor","regex","DATE_PUBLISHED_META_TAGS","DATE_PUBLISHED_SELECTORS","abbrevMonthsStr","DATE_PUBLISHED_URL_RES","GenericDatePublishedExtractor","datePublished","GenericDekExtractor","LEAD_IMAGE_URL_META_TAGS","LEAD_IMAGE_URL_SELECTORS","POSITIVE_LEAD_IMAGE_URL_HINTS","POSITIVE_LEAD_IMAGE_URL_HINTS_RE","NEGATIVE_LEAD_IMAGE_URL_HINTS","NEGATIVE_LEAD_IMAGE_URL_HINTS_RE","GIF_RE","JPG_RE","getSig","scoreImageUrl","scoreAttr","scoreByParents","$figParent","$gParent","scoreBySibling","scoreByDimensions","area","round","scoreByPosition","$imgs","GenericLeadImageUrlExtractor","cleanUrl","imageUrl","imgs","imgScores","topUrl","scoreSimilarity","articleUrl","similarity","difflib","SequenceMatcher","ratio","diffPercent","diffModifier","scoreLinkText","linkTextAsNum","scorePageInLink","isWp","DIGIT_RE","EXTRANEOUS_LINK_HINTS","EXTRANEOUS_LINK_HINTS_RE","NEXT_LINK_TEXT_RE","CAP_LINK_TEXT_RE","PREV_LINK_TEXT_RE","scoreExtraneousLinks","makeSig","$link","positiveMatch","negativeMatch","Array","parentData","scorePrevLink","linkData","shouldScore","previousUrls","linkHost","fragment","scoreBaseUrl","baseRegex","scoreNextLinkText","scoreCapLinks","makeBaseRegex","scoreLinks","links","scoredPages","possiblePages","link","possiblePage","GenericNextPageUrlExtractor","scoredLinks","topPage","scoredLink","CANONICAL_META_SELECTORS","parseDomain","GenericUrlExtractor","$canonical","metaUrl","EXCERPT_META_SELECTORS","maxLength","ellipsize","ellipse","GenericExcerptExtractor","shortContent","GenericWordCountExtractor","GenericExtractor","bind","url_and_domain","word_count","direction","stringDirection","getDirection","loaded","Detectors","detectByHtml","getExtractor","baseDomain","Extractors","cleanBySelectors","transformElements","$matches","findMatchingSelector","extractHtml","allowMultiple","isArray","select","extractionOpts","matchingSelector","transformAndClean","selectHtml","$wrapper","wrap","el","$match","transform","item","selectExtendedTypes","results","t","extractResult","fallback","RootExtractor","contentOnly","extractedTitle","extendedResults","collectAllPages","Extractor","pages","extractorOpts","nextPageResult","total_pages","pages_rendered","Mercury","fetchAllPages","extendedTypes","rendered_pages","turndownService","TurndownService","turndown","addCustomExtractor"],"mappings":"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"}